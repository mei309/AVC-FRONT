{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { NavigationEnd } from '@angular/router';\nimport { take } from 'rxjs/operators';\nimport { SupplierDetailsDialogComponent } from './supplier-details-dialog-component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"./suppliers.service\";\nimport * as i3 from \"./../genral.service\";\nimport * as i4 from \"@angular/material/dialog\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"../components/dynamic-form/dynamic-form.component\";\n\nfunction NewSupplierComponent_dynamic_form_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"dynamic-form\", 1);\n    i0.ɵɵlistener(\"submitForm\", function NewSupplierComponent_dynamic_form_0_Template_dynamic_form_submitForm_0_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return ctx_r1.submit($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"fields\", ctx_r0.regConfig);\n  }\n}\n\nexport class NewSupplierComponent {\n  constructor(_Activatedroute, router, cdRef, LocalService, genral, dialog) {\n    this._Activatedroute = _Activatedroute;\n    this.router = router;\n    this.cdRef = cdRef;\n    this.LocalService = LocalService;\n    this.genral = genral;\n    this.dialog = dialog;\n    this.isRealodReady = true;\n  }\n\n  ngOnInit() {\n    this.navigationSubscription = this.router.events.subscribe(e => {\n      // If it is a NavigationEnd event re-initalise the component\n      if (e instanceof NavigationEnd) {\n        this.isRealodReady = false;\n        this.cdRef.detectChanges();\n        this.isRealodReady = true;\n      }\n    });\n    this.regConfig = [{\n      type: 'input',\n      label: \"supplier name\",\n      inputType: 'text',\n      name: 'name',\n      validations: [{\n        name: 'required',\n        validator: Validators.required,\n        message: \"Required\"\n      }]\n    }, {\n      type: 'selectMultipile',\n      label: \"Supply category\",\n      name: 'supplyCategories',\n      options: this.LocalService.getSupplyType(),\n      validations: [{\n        name: 'required',\n        validator: Validators.required,\n        message: \"Required\"\n      }]\n    }, {\n      type: 'input',\n      label: \"Legal english name\",\n      name: 'englishName'\n    }, {\n      type: 'input',\n      label: \"Legal vietnamese name\",\n      name: 'localName'\n    }, {\n      type: 'input',\n      label: \"Company license\",\n      name: 'license'\n    }, {\n      type: 'input',\n      label: \"Tax code\",\n      name: 'taxCode'\n    }, {\n      type: 'input',\n      label: \"Registered location\",\n      name: 'registrationLocation'\n    }, {\n      type: 'bigoutside',\n      label: \"Contact info\",\n      name: 'contactDetails',\n      inputType: 'alone',\n      collections: [{\n        type: 'bignotexpand',\n        name: 'addresses',\n        collections: [{\n          type: 'textarry',\n          label: \"Street address\",\n          inputType: 'text',\n          name: 'streetAddress',\n          autocomplete: 'my-streetAddress'\n        }, {\n          type: 'selectgroup',\n          inputType: 'countryName',\n          options: this.LocalService.getCities(),\n          collections: [{\n            type: 'select',\n            label: \"Country\",\n            value: 'Vietnam',\n            autocomplete: 'my-contry'\n          }, {\n            type: 'select',\n            label: \"City/State\",\n            name: 'city',\n            autocomplete: 'my-city'\n          }]\n        }],\n        validations: [{\n          name: 'streetAddress',\n          message: \"a address must have a street and city\"\n        }, {\n          name: 'city'\n        }]\n      }, {\n        type: 'array',\n        label: \"Phone\",\n        inputType: 'number',\n        name: 'phones',\n        collections: 'phonesmain',\n        autocomplete: 'my-phones' // validations: [\n        //   {\n        //     name: 'pattern',\n        //     validator: Validators.pattern(\n        //       '[0-9\\+\\-\\]{0-10}$'\n        //     ),\n        //     message: 'Invalid phone'\n        //   }\n        // ]\n\n      }, {\n        type: 'array',\n        label: \"Email\",\n        inputType: 'text',\n        name: 'emails',\n        autocomplete: 'my-emails',\n        validations: [{\n          name: 'pattern',\n          validator: Validators.pattern('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,4}$'),\n          message: \"Invalid email\"\n        }]\n      }, {\n        type: 'array',\n        label: \"Fax\",\n        inputType: 'number',\n        name: 'faxes',\n        autocomplete: 'my-faxes' // validations: [\n        //   {\n        //     name: 'pattern',\n        //     validator: Validators.pattern(\n        //       '^[0-9+-]'\n        //     ),\n        //     message: 'Invalid fax'\n        //   }\n        // ]\n\n      }, {\n        type: 'bigexpand',\n        label: \"bank accounts\",\n        name: 'paymentAccounts',\n        collections: [{\n          type: 'bignotexpand',\n          name: 'bankAccount',\n          collections: [{\n            type: 'input',\n            label: \"Owner name\",\n            name: 'ownerName'\n          }, {\n            type: 'input',\n            label: \"Account number\",\n            name: 'accountNo'\n          }, {\n            type: 'selectgroup',\n            inputType: 'bankName',\n            options: this.LocalService.getBranches(),\n            collections: [{\n              type: 'select',\n              label: \"Bank\"\n            }, {\n              type: 'select',\n              label: \"Branch\",\n              name: 'branch'\n            }]\n          }]\n        }, {\n          type: 'divider',\n          inputType: 'divide'\n        }],\n        validations: [{\n          name: 'bankAccount',\n          validator: [{\n            name: 'ownerName'\n          }, {\n            name: 'accountNo'\n          }, {\n            name: 'branch'\n          }],\n          message: \"a bank must have owner name and account and branch\"\n        }]\n      }]\n    }, {\n      type: 'bigexpand',\n      label: \"Contact person\",\n      name: 'companyContacts',\n      collections: [{\n        type: 'bignotexpand',\n        name: 'person',\n        collections: [{\n          type: 'input',\n          label: \"Name\",\n          inputType: 'text',\n          name: 'name'\n        }, {\n          type: 'bignotexpand',\n          name: 'contactDetails',\n          collections: [{\n            type: 'bignotexpand',\n            name: 'addresses',\n            collections: [{\n              type: 'textarry',\n              label: \"Street address\",\n              inputType: 'text',\n              name: 'streetAddress',\n              autocomplete: 'my-streetAddress'\n            }, {\n              type: 'selectgroup',\n              inputType: 'countryName',\n              options: this.LocalService.getCities(),\n              collections: [{\n                type: 'select',\n                label: \"Country\",\n                autocomplete: 'my-country'\n              }, {\n                type: 'select',\n                label: \"City/State\",\n                name: 'city',\n                autocomplete: 'my-city'\n              }]\n            }],\n            validations: [{\n              name: 'streetAddress',\n              message: \"a address must have a street and city\"\n            }, {\n              name: 'city'\n            }]\n          }, {\n            type: 'array',\n            label: \"Phone\",\n            inputType: 'number',\n            name: 'phones',\n            collections: 'phoneschild',\n            autocomplete: 'my-phones'\n          }, {\n            type: 'array',\n            label: \"Email\",\n            inputType: 'text',\n            name: 'emails',\n            autocomplete: 'my-emails',\n            validations: [{\n              name: 'pattern',\n              validator: Validators.pattern('^[a-z0-9._%+-]+@[a-z0-9.-]+.[a-z]{2,4}$'),\n              message: \"Invalid email\"\n            }]\n          }, {\n            type: 'array',\n            label: \"Fax\",\n            inputType: 'number',\n            name: 'faxes',\n            autocomplete: 'my-faxes'\n          }]\n        }, {\n          type: 'popup',\n          label: \"ID infromtion\",\n          name: 'idCard',\n          collections: [{\n            type: 'input',\n            label: \"ID number\",\n            name: 'idNumber',\n            inputType: 'text'\n          }, {\n            type: 'date',\n            label: \"ID date of issue\",\n            name: 'dateOfIssue'\n          }, {\n            type: 'input',\n            label: \"ID place of issue\",\n            name: 'placeOfIssue',\n            inputType: 'text'\n          }, {\n            type: 'select',\n            label: \"Nationality\",\n            name: 'nationality',\n            options: this.LocalService.getCountries()\n          }, {\n            type: 'date',\n            label: \"Date of birth\",\n            name: 'dob'\n          }, {\n            type: 'button',\n            label: \"Save ID\",\n            name: 'submit'\n          }]\n        }]\n      }, {\n        type: 'select',\n        label: \"Position\",\n        name: 'position',\n        options: this.LocalService.getCompanyPosition()\n      }, {\n        type: 'divider',\n        inputType: 'divide'\n      }],\n      validations: [{\n        name: 'person',\n        validator: [{\n          name: 'name'\n        }],\n        message: \"a person must have a name\"\n      }]\n    }, {\n      type: 'button',\n      label: \"Submit\",\n      name: 'submit'\n    }];\n  }\n\n  submit(value) {\n    this.LocalService.addSupplier(value).pipe(take(1)).subscribe(val => {\n      const dialogRef = this.dialog.open(SupplierDetailsDialogComponent, {\n        width: '80%',\n        data: {\n          supplier: val,\n          fromNew: true\n        }\n      });\n      dialogRef.afterClosed().subscribe(result => {\n        if (result === \"edit\") {\n          this.router.navigate(['../EditSupplier', {\n            id: val['id']\n          }], {\n            relativeTo: this._Activatedroute\n          });\n        } else {\n          this.router.navigate(['../Suppliers'], {\n            relativeTo: this._Activatedroute\n          });\n        }\n      });\n    });\n  }\n\n  ngOnDestroy() {\n    if (this.navigationSubscription) {\n      this.navigationSubscription.unsubscribe();\n    }\n  }\n\n}\n\nNewSupplierComponent.ɵfac = function NewSupplierComponent_Factory(t) {\n  return new (t || NewSupplierComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.SuppliersService), i0.ɵɵdirectiveInject(i3.Genral), i0.ɵɵdirectiveInject(i4.MatDialog));\n};\n\nNewSupplierComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: NewSupplierComponent,\n  selectors: [[\"new-supplier\"]],\n  decls: 1,\n  vars: 1,\n  consts: function () {\n    let i18n_0;\n\n    if (typeof ngI18nClosureMode !== \"undefined\" && ngI18nClosureMode) {\n      const MSG_EXTERNAL_4272620452557036132$$SRC_APP_SUPPLIERS_NEW_SUPPLIERS_COMPONENT_TS_1 = goog.getMsg(\"New supplier\");\n      i18n_0 = MSG_EXTERNAL_4272620452557036132$$SRC_APP_SUPPLIERS_NEW_SUPPLIERS_COMPONENT_TS_1;\n    } else {\n      i18n_0 = \"New supplier\";\n    }\n\n    return [[\"mainLabel\", i18n_0, 3, \"fields\", \"submitForm\", 4, \"ngIf\"], [\"mainLabel\", i18n_0, 3, \"fields\", \"submitForm\"]];\n  },\n  template: function NewSupplierComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, NewSupplierComponent_dynamic_form_0_Template, 1, 1, \"dynamic-form\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.isRealodReady);\n    }\n  },\n  directives: [i5.NgIf, i6.DynamicFormComponent],\n  encapsulation: 2\n});","map":{"version":3,"sources":["C:/Users/isral/OneDrive/Documents/AVC-FRONT/src/app/suppliers/new-suppliers.component.ts"],"names":["Validators","NavigationEnd","take","SupplierDetailsDialogComponent","i0","i1","i2","i3","i4","i5","i6","NewSupplierComponent_dynamic_form_0_Template","rf","ctx","_r2","ɵɵgetCurrentView","ɵɵelementStart","ɵɵlistener","NewSupplierComponent_dynamic_form_0_Template_dynamic_form_submitForm_0_listener","$event","ɵɵrestoreView","ctx_r1","ɵɵnextContext","submit","ɵɵelementEnd","ctx_r0","ɵɵproperty","regConfig","NewSupplierComponent","constructor","_Activatedroute","router","cdRef","LocalService","genral","dialog","isRealodReady","ngOnInit","navigationSubscription","events","subscribe","e","detectChanges","type","label","inputType","name","validations","validator","required","message","options","getSupplyType","collections","autocomplete","getCities","value","pattern","getBranches","getCountries","getCompanyPosition","addSupplier","pipe","val","dialogRef","open","width","data","supplier","fromNew","afterClosed","result","navigate","id","relativeTo","ngOnDestroy","unsubscribe","ɵfac","NewSupplierComponent_Factory","t","ɵɵdirectiveInject","ActivatedRoute","Router","ChangeDetectorRef","SuppliersService","Genral","MatDialog","ɵcmp","ɵɵdefineComponent","selectors","decls","vars","consts","i18n_0","ngI18nClosureMode","MSG_EXTERNAL_4272620452557036132$$SRC_APP_SUPPLIERS_NEW_SUPPLIERS_COMPONENT_TS_1","goog","getMsg","template","NewSupplierComponent_Template","ɵɵtemplate","directives","NgIf","DynamicFormComponent","encapsulation"],"mappings":"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","sourcesContent":["import { Validators } from '@angular/forms';\r\nimport { NavigationEnd } from '@angular/router';\r\nimport { take } from 'rxjs/operators';\r\nimport { SupplierDetailsDialogComponent } from './supplier-details-dialog-component';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/router\";\r\nimport * as i2 from \"./suppliers.service\";\r\nimport * as i3 from \"./../genral.service\";\r\nimport * as i4 from \"@angular/material/dialog\";\r\nimport * as i5 from \"@angular/common\";\r\nimport * as i6 from \"../components/dynamic-form/dynamic-form.component\";\r\nfunction NewSupplierComponent_dynamic_form_0_Template(rf, ctx) { if (rf & 1) {\r\n    const _r2 = i0.ɵɵgetCurrentView();\r\n    i0.ɵɵelementStart(0, \"dynamic-form\", 1);\r\n    i0.ɵɵlistener(\"submitForm\", function NewSupplierComponent_dynamic_form_0_Template_dynamic_form_submitForm_0_listener($event) { i0.ɵɵrestoreView(_r2); const ctx_r1 = i0.ɵɵnextContext(); return ctx_r1.submit($event); });\r\n    i0.ɵɵelementEnd();\r\n} if (rf & 2) {\r\n    const ctx_r0 = i0.ɵɵnextContext();\r\n    i0.ɵɵproperty(\"fields\", ctx_r0.regConfig);\r\n} }\r\nexport class NewSupplierComponent {\r\n    constructor(_Activatedroute, router, cdRef, LocalService, genral, dialog) {\r\n        this._Activatedroute = _Activatedroute;\r\n        this.router = router;\r\n        this.cdRef = cdRef;\r\n        this.LocalService = LocalService;\r\n        this.genral = genral;\r\n        this.dialog = dialog;\r\n        this.isRealodReady = true;\r\n    }\r\n    ngOnInit() {\r\n        this.navigationSubscription = this.router.events.subscribe((e) => {\r\n            // If it is a NavigationEnd event re-initalise the component\r\n            if (e instanceof NavigationEnd) {\r\n                this.isRealodReady = false;\r\n                this.cdRef.detectChanges();\r\n                this.isRealodReady = true;\r\n            }\r\n        });\r\n        this.regConfig = [\r\n            {\r\n                type: 'input',\r\n                label: $localize `supplier name`,\r\n                inputType: 'text',\r\n                name: 'name',\r\n                validations: [\r\n                    {\r\n                        name: 'required',\r\n                        validator: Validators.required,\r\n                        message: $localize `Required`\r\n                    },\r\n                ]\r\n            },\r\n            {\r\n                type: 'selectMultipile',\r\n                label: $localize `Supply category`,\r\n                name: 'supplyCategories',\r\n                options: this.LocalService.getSupplyType(),\r\n                validations: [\r\n                    {\r\n                        name: 'required',\r\n                        validator: Validators.required,\r\n                        message: $localize `Required`,\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                type: 'input',\r\n                label: $localize `Legal english name`,\r\n                name: 'englishName',\r\n            },\r\n            {\r\n                type: 'input',\r\n                label: $localize `Legal vietnamese name`,\r\n                name: 'localName',\r\n            },\r\n            {\r\n                type: 'input',\r\n                label: $localize `Company license`,\r\n                name: 'license',\r\n            },\r\n            {\r\n                type: 'input',\r\n                label: $localize `Tax code`,\r\n                name: 'taxCode',\r\n            },\r\n            {\r\n                type: 'input',\r\n                label: $localize `Registered location`,\r\n                name: 'registrationLocation',\r\n            },\r\n            {\r\n                type: 'bigoutside',\r\n                label: $localize `Contact info`,\r\n                name: 'contactDetails',\r\n                inputType: 'alone',\r\n                collections: [\r\n                    {\r\n                        type: 'bignotexpand',\r\n                        name: 'addresses',\r\n                        collections: [\r\n                            {\r\n                                type: 'textarry',\r\n                                label: $localize `Street address`,\r\n                                inputType: 'text',\r\n                                name: 'streetAddress',\r\n                                autocomplete: 'my-streetAddress',\r\n                            },\r\n                            {\r\n                                type: 'selectgroup',\r\n                                inputType: 'countryName',\r\n                                options: this.LocalService.getCities(),\r\n                                collections: [\r\n                                    {\r\n                                        type: 'select',\r\n                                        label: $localize `Country`,\r\n                                        value: 'Vietnam',\r\n                                        autocomplete: 'my-contry',\r\n                                    },\r\n                                    {\r\n                                        type: 'select',\r\n                                        label: $localize `City/State`,\r\n                                        name: 'city',\r\n                                        autocomplete: 'my-city',\r\n                                    },\r\n                                ]\r\n                            },\r\n                        ],\r\n                        validations: [\r\n                            {\r\n                                name: 'streetAddress',\r\n                                message: $localize `a address must have a street and city`,\r\n                            },\r\n                            {\r\n                                name: 'city',\r\n                            }\r\n                        ]\r\n                    },\r\n                    {\r\n                        type: 'array',\r\n                        label: $localize `Phone`,\r\n                        inputType: 'number',\r\n                        name: 'phones',\r\n                        collections: 'phonesmain',\r\n                        autocomplete: 'my-phones',\r\n                        // validations: [\r\n                        //   {\r\n                        //     name: 'pattern',\r\n                        //     validator: Validators.pattern(\r\n                        //       '[0-9\\+\\-\\]{0-10}$'\r\n                        //     ),\r\n                        //     message: 'Invalid phone'\r\n                        //   }\r\n                        // ]\r\n                    },\r\n                    {\r\n                        type: 'array',\r\n                        label: $localize `Email`,\r\n                        inputType: 'text',\r\n                        name: 'emails',\r\n                        autocomplete: 'my-emails',\r\n                        validations: [\r\n                            {\r\n                                name: 'pattern',\r\n                                validator: Validators.pattern('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,4}$'),\r\n                                message: $localize `Invalid email`\r\n                            }\r\n                        ]\r\n                    },\r\n                    {\r\n                        type: 'array',\r\n                        label: $localize `Fax`,\r\n                        inputType: 'number',\r\n                        name: 'faxes',\r\n                        autocomplete: 'my-faxes',\r\n                        // validations: [\r\n                        //   {\r\n                        //     name: 'pattern',\r\n                        //     validator: Validators.pattern(\r\n                        //       '^[0-9+-]'\r\n                        //     ),\r\n                        //     message: 'Invalid fax'\r\n                        //   }\r\n                        // ]\r\n                    },\r\n                    {\r\n                        type: 'bigexpand',\r\n                        label: $localize `bank accounts`,\r\n                        name: 'paymentAccounts',\r\n                        collections: [\r\n                            {\r\n                                type: 'bignotexpand',\r\n                                name: 'bankAccount',\r\n                                collections: [\r\n                                    {\r\n                                        type: 'input',\r\n                                        label: $localize `Owner name`,\r\n                                        name: 'ownerName',\r\n                                    },\r\n                                    {\r\n                                        type: 'input',\r\n                                        label: $localize `Account number`,\r\n                                        name: 'accountNo',\r\n                                    },\r\n                                    {\r\n                                        type: 'selectgroup',\r\n                                        inputType: 'bankName',\r\n                                        options: this.LocalService.getBranches(),\r\n                                        collections: [\r\n                                            {\r\n                                                type: 'select',\r\n                                                label: $localize `Bank`,\r\n                                            },\r\n                                            {\r\n                                                type: 'select',\r\n                                                label: $localize `Branch`,\r\n                                                name: 'branch',\r\n                                            },\r\n                                        ]\r\n                                    },\r\n                                ]\r\n                            },\r\n                            {\r\n                                type: 'divider',\r\n                                inputType: 'divide'\r\n                            },\r\n                        ],\r\n                        validations: [\r\n                            {\r\n                                name: 'bankAccount',\r\n                                validator: [\r\n                                    {\r\n                                        name: 'ownerName',\r\n                                    },\r\n                                    {\r\n                                        name: 'accountNo',\r\n                                    },\r\n                                    {\r\n                                        name: 'branch',\r\n                                    }\r\n                                ],\r\n                                message: $localize `a bank must have owner name and account and branch`,\r\n                            }\r\n                        ]\r\n                    },\r\n                ]\r\n            },\r\n            {\r\n                type: 'bigexpand',\r\n                label: $localize `Contact person`,\r\n                name: 'companyContacts',\r\n                collections: [\r\n                    {\r\n                        type: 'bignotexpand',\r\n                        name: 'person',\r\n                        collections: [\r\n                            {\r\n                                type: 'input',\r\n                                label: $localize `Name`,\r\n                                inputType: 'text',\r\n                                name: 'name',\r\n                            },\r\n                            {\r\n                                type: 'bignotexpand',\r\n                                name: 'contactDetails',\r\n                                collections: [\r\n                                    {\r\n                                        type: 'bignotexpand',\r\n                                        name: 'addresses',\r\n                                        collections: [\r\n                                            {\r\n                                                type: 'textarry',\r\n                                                label: $localize `Street address`,\r\n                                                inputType: 'text',\r\n                                                name: 'streetAddress',\r\n                                                autocomplete: 'my-streetAddress',\r\n                                            },\r\n                                            {\r\n                                                type: 'selectgroup',\r\n                                                inputType: 'countryName',\r\n                                                options: this.LocalService.getCities(),\r\n                                                collections: [\r\n                                                    {\r\n                                                        type: 'select',\r\n                                                        label: $localize `Country`,\r\n                                                        autocomplete: 'my-country'\r\n                                                    },\r\n                                                    {\r\n                                                        type: 'select',\r\n                                                        label: $localize `City/State`,\r\n                                                        name: 'city',\r\n                                                        autocomplete: 'my-city'\r\n                                                    },\r\n                                                ]\r\n                                            },\r\n                                        ],\r\n                                        validations: [\r\n                                            {\r\n                                                name: 'streetAddress',\r\n                                                message: $localize `a address must have a street and city`,\r\n                                            },\r\n                                            {\r\n                                                name: 'city',\r\n                                            }\r\n                                        ]\r\n                                    },\r\n                                    {\r\n                                        type: 'array',\r\n                                        label: $localize `Phone`,\r\n                                        inputType: 'number',\r\n                                        name: 'phones',\r\n                                        collections: 'phoneschild',\r\n                                        autocomplete: 'my-phones',\r\n                                    },\r\n                                    {\r\n                                        type: 'array',\r\n                                        label: $localize `Email`,\r\n                                        inputType: 'text',\r\n                                        name: 'emails',\r\n                                        autocomplete: 'my-emails',\r\n                                        validations: [\r\n                                            {\r\n                                                name: 'pattern',\r\n                                                validator: Validators.pattern('^[a-z0-9._%+-]+@[a-z0-9.-]+.[a-z]{2,4}$'),\r\n                                                message: $localize `Invalid email`\r\n                                            }\r\n                                        ]\r\n                                    },\r\n                                    {\r\n                                        type: 'array',\r\n                                        label: $localize `Fax`,\r\n                                        inputType: 'number',\r\n                                        name: 'faxes',\r\n                                        autocomplete: 'my-faxes',\r\n                                    },\r\n                                ]\r\n                            },\r\n                            {\r\n                                type: 'popup',\r\n                                label: $localize `ID infromtion`,\r\n                                name: 'idCard',\r\n                                collections: [\r\n                                    {\r\n                                        type: 'input',\r\n                                        label: $localize `ID number`,\r\n                                        name: 'idNumber',\r\n                                        inputType: 'text'\r\n                                    },\r\n                                    {\r\n                                        type: 'date',\r\n                                        label: $localize `ID date of issue`,\r\n                                        name: 'dateOfIssue',\r\n                                    },\r\n                                    {\r\n                                        type: 'input',\r\n                                        label: $localize `ID place of issue`,\r\n                                        name: 'placeOfIssue',\r\n                                        inputType: 'text'\r\n                                    },\r\n                                    {\r\n                                        type: 'select',\r\n                                        label: $localize `Nationality`,\r\n                                        name: 'nationality',\r\n                                        options: this.LocalService.getCountries(),\r\n                                    },\r\n                                    {\r\n                                        type: 'date',\r\n                                        label: $localize `Date of birth`,\r\n                                        name: 'dob',\r\n                                    },\r\n                                    {\r\n                                        type: 'button',\r\n                                        label: $localize `Save ID`,\r\n                                        name: 'submit',\r\n                                    }\r\n                                ]\r\n                            },\r\n                        ]\r\n                    },\r\n                    {\r\n                        type: 'select',\r\n                        label: $localize `Position`,\r\n                        name: 'position',\r\n                        options: this.LocalService.getCompanyPosition(),\r\n                    },\r\n                    {\r\n                        type: 'divider',\r\n                        inputType: 'divide'\r\n                    },\r\n                ],\r\n                validations: [\r\n                    {\r\n                        name: 'person',\r\n                        validator: [\r\n                            {\r\n                                name: 'name',\r\n                            },\r\n                        ],\r\n                        message: $localize `a person must have a name`,\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                type: 'button',\r\n                label: $localize `Submit`,\r\n                name: 'submit'\r\n            }\r\n        ];\r\n    }\r\n    submit(value) {\r\n        this.LocalService.addSupplier(value).pipe(take(1)).subscribe(val => {\r\n            const dialogRef = this.dialog.open(SupplierDetailsDialogComponent, {\r\n                width: '80%',\r\n                data: { supplier: val, fromNew: true }\r\n            });\r\n            dialogRef.afterClosed().subscribe(result => {\r\n                if (result === $localize `edit`) {\r\n                    this.router.navigate(['../EditSupplier', { id: val['id'] }], { relativeTo: this._Activatedroute });\r\n                }\r\n                else {\r\n                    this.router.navigate(['../Suppliers'], { relativeTo: this._Activatedroute });\r\n                }\r\n            });\r\n        });\r\n    }\r\n    ngOnDestroy() {\r\n        if (this.navigationSubscription) {\r\n            this.navigationSubscription.unsubscribe();\r\n        }\r\n    }\r\n}\r\nNewSupplierComponent.ɵfac = function NewSupplierComponent_Factory(t) { return new (t || NewSupplierComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.SuppliersService), i0.ɵɵdirectiveInject(i3.Genral), i0.ɵɵdirectiveInject(i4.MatDialog)); };\r\nNewSupplierComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: NewSupplierComponent, selectors: [[\"new-supplier\"]], decls: 1, vars: 1, consts: function () { let i18n_0; if (typeof ngI18nClosureMode !== \"undefined\" && ngI18nClosureMode) {\r\n        const MSG_EXTERNAL_4272620452557036132$$SRC_APP_SUPPLIERS_NEW_SUPPLIERS_COMPONENT_TS_1 = goog.getMsg(\"New supplier\");\r\n        i18n_0 = MSG_EXTERNAL_4272620452557036132$$SRC_APP_SUPPLIERS_NEW_SUPPLIERS_COMPONENT_TS_1;\r\n    }\r\n    else {\r\n        i18n_0 = $localize `:␟33efad7c7057ddd65702963c78f2949658217910␟4272620452557036132:New supplier`;\r\n    } return [[\"mainLabel\", i18n_0, 3, \"fields\", \"submitForm\", 4, \"ngIf\"], [\"mainLabel\", i18n_0, 3, \"fields\", \"submitForm\"]]; }, template: function NewSupplierComponent_Template(rf, ctx) { if (rf & 1) {\r\n        i0.ɵɵtemplate(0, NewSupplierComponent_dynamic_form_0_Template, 1, 1, \"dynamic-form\", 0);\r\n    } if (rf & 2) {\r\n        i0.ɵɵproperty(\"ngIf\", ctx.isRealodReady);\r\n    } }, directives: [i5.NgIf, i6.DynamicFormComponent], encapsulation: 2 });\r\n"]},"metadata":{},"sourceType":"module"}