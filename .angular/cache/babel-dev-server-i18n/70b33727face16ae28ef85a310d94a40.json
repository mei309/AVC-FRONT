{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { NavigationEnd } from '@angular/router';\nimport { take } from 'rxjs/operators';\nimport { ReceiptDialog } from './receipt-dialog.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"./receipt.service\";\nimport * as i3 from \"../genral.service\";\nimport * as i4 from \"@angular/material/dialog\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"../components/dynamic-form/dynamic-form.component\";\n\nfunction ReceiveCAlone_dynamic_form_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"dynamic-form\", 1);\n    i0.ɵɵlistener(\"submitForm\", function ReceiveCAlone_dynamic_form_0_Template_dynamic_form_submitForm_0_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return ctx_r1.submit($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"fields\", ctx_r0.regConfig);\n  }\n}\n\nexport class ReceiveCAlone {\n  constructor(router, _Activatedroute, cdRef, localService, genral, dialog) {\n    this.router = router;\n    this._Activatedroute = _Activatedroute;\n    this.cdRef = cdRef;\n    this.localService = localService;\n    this.genral = genral;\n    this.dialog = dialog;\n    this.isRealodReady = true;\n  }\n\n  ngOnInit() {\n    this.regConfig = [{\n      type: 'selectgroup',\n      inputType: 'supplierName',\n      options: this.localService.findFreePoCodes(),\n      collections: [{\n        type: 'select',\n        label: \"Supplier\"\n      }, {\n        type: 'select',\n        label: \"#PO\",\n        name: 'poCode',\n        collections: 'somewhere',\n        validations: [{\n          name: 'required',\n          validator: Validators.required,\n          message: \"PO code Required\"\n        }]\n      }]\n    }, {\n      type: 'date',\n      label: \"Receiving date\",\n      value: 'timeNow',\n      name: 'recordedTime',\n      options: 'withTime',\n      validations: [{\n        name: 'required',\n        validator: Validators.required,\n        message: \"Receiving date Required\"\n      }]\n    }, {\n      type: 'bigexpand',\n      label: \"Receive product\",\n      name: 'receiptItems',\n      value: 'required',\n      collections: [{\n        type: 'select',\n        label: \"Item descrption\",\n        name: 'item',\n        collections: 'somewhere',\n        options: this.genral.getItemsCashew('Raw')\n      }, {\n        type: 'selectMU',\n        label: \"Weight unit\",\n        name: 'measureUnit'\n      }, {\n        type: 'inputselect',\n        name: 'extraRequested',\n        collections: [{\n          type: 'input',\n          label: \"Extra requseted\",\n          name: 'amount',\n          inputType: 'numeric',\n          options: 3\n        }, {\n          type: 'select',\n          label: \"Weight unit\",\n          name: 'measureUnit',\n          options: ['KG', 'LBS']\n        }]\n      }, {\n        type: 'popup',\n        label: \"Extra received\",\n        name: 'bouns',\n        collections: [{\n          type: 'bigexpand',\n          name: 'extraAdded',\n          options: 'Inline',\n          collections: [{\n            type: 'input',\n            label: \"Bag weight\",\n            name: 'unitAmount',\n            inputType: 'numeric',\n            options: 3\n          }, {\n            type: 'input',\n            label: \"Number of bags\",\n            name: 'numberUnits',\n            inputType: 'numeric',\n            options: 3\n          }, {\n            type: 'select',\n            label: \"Warehouse location\",\n            name: 'warehouseLocation',\n            collections: 'somewhere',\n            options: this.genral.getWearhouses()\n          }, {\n            type: 'divider',\n            inputType: 'divide'\n          }],\n          validations: [{\n            name: 'unitAmount',\n            message: \"a received storage must have unit weight and number of bags\"\n          }, {\n            name: 'numberUnits'\n          }]\n        }, {\n          type: 'button',\n          label: \"Save\",\n          name: 'submit'\n        }]\n      }, {\n        type: 'divider',\n        inputType: 'newlinespace'\n      }, {\n        type: 'bigexpand',\n        label: \"Amounts\",\n        name: 'storageForms',\n        options: 'Inline',\n        collections: [{\n          type: 'input',\n          label: \"Bag weight\",\n          name: 'unitAmount',\n          inputType: 'numeric',\n          options: 3\n        }, {\n          type: 'input',\n          label: \"Number of bags\",\n          name: 'numberUnits',\n          inputType: 'numeric',\n          options: 3\n        }, {\n          type: 'select',\n          label: \"Warehouse location\",\n          name: 'warehouseLocation',\n          collections: 'somewhere',\n          options: this.genral.getWearhouses()\n        }, {\n          type: 'popup',\n          label: \"Samples\",\n          name: 'samplesWeight',\n          inputType: true,\n          collections: [// {\n          //     type: 'array',\n          //     label: 'Empty bag weight',\n          //     name: 'sampleContainerWeight',\n          //     inputType: 'numeric',\n          //     options: 3,\n          // },\n          {\n            type: 'arrayordinal',\n            label: \"Empty bag weights\",\n            inputType: 'inline',\n            name: 'sampleContainerWeights',\n            options: 3,\n            collections: 1\n          }, {\n            type: 'arrayordinal',\n            label: \"Samples (+-from unit weight)\",\n            // inputType: 'numeric',\n            name: 'sampleWeights',\n            options: 3,\n            collections: 30\n          }, {\n            type: 'input',\n            label: \"Avrage weight (full weight)\",\n            name: 'avgTestedWeight',\n            inputType: 'numeric',\n            options: 3\n          }, {\n            type: 'input',\n            label: \"number of samples (if put avrage)\",\n            name: 'numberOfSamples',\n            inputType: 'numeric'\n          }, {\n            type: 'button',\n            label: \"Submit\",\n            name: 'submit'\n          }]\n        }, {\n          type: 'divider',\n          inputType: 'divide'\n        }],\n        validations: [{\n          name: 'unitAmount',\n          message: \"a received storage must have weight and number of bags\"\n        }, {\n          name: 'numberUnits'\n        }]\n      }, {\n        type: 'divider',\n        inputType: 'titel',\n        label: \"Invoice amounts\"\n      }, {\n        type: 'inputselect',\n        name: 'receivedOrderUnits',\n        collections: [{\n          type: 'input',\n          label: \"Payable weight\",\n          name: 'amount',\n          inputType: 'numeric',\n          options: 3,\n          validations: [{\n            name: 'required',\n            validator: Validators.required,\n            message: \"Payable weight Required\"\n          }]\n        }, {\n          type: 'select',\n          label: \"Measure unit\",\n          name: 'measureUnit',\n          value: 'LBS',\n          options: this.genral.getMeasureUnit()\n        }]\n      }, {\n        type: 'inputselect',\n        name: 'unitPrice',\n        collections: [{\n          type: 'input',\n          label: \"Price per unit\",\n          name: 'amount',\n          inputType: 'numeric',\n          options: 3\n        }, {\n          type: 'select',\n          label: \"Currency\",\n          name: 'currency',\n          options: ['USD', 'VND']\n        }]\n      }, {\n        type: 'divider',\n        inputType: 'divide'\n      }],\n      validations: [{\n        name: 'item',\n        message: \"a received item must have an item, and at least one storage\"\n      }, {\n        name: 'measureUnit'\n      }, {\n        name: 'storageForms',\n        validator: [{\n          name: 'unitAmount'\n        }, {\n          name: 'numberUnits'\n        }]\n      }]\n    }, {\n      type: 'button',\n      label: \"Submit\",\n      name: 'submit'\n    }];\n    this.navigationSubscription = this.router.events.subscribe(e => {\n      // If it is a NavigationEnd event re-initalise the component\n      if (e instanceof NavigationEnd) {\n        this.isRealodReady = false;\n        this.cdRef.detectChanges();\n        this.isRealodReady = true;\n      }\n    });\n  }\n\n  submit(value) {\n    value['receiptItems'].forEach(element => {\n      if (element['bouns']) {\n        element['extraAdded'] = element['bouns']['extraAdded'];\n        delete element['bouns'];\n      }\n\n      if (!element['extraRequested']['amount']) {\n        delete element['extraRequested'];\n      }\n\n      if (!element['receivedOrderUnits']['amount']) {\n        delete element['receivedOrderUnits'];\n      }\n\n      if (!element['unitPrice']['amount']) {\n        delete element['unitPrice'];\n      }\n\n      element['storageForms'].forEach(ele => {\n        if (ele['samplesWeight']) {\n          ele['sampleContainerWeights'] = ele['samplesWeight']['sampleContainerWeights'] ? ele['samplesWeight']['sampleContainerWeights'].filter(amou => amou.amount) : null;\n          ele['avgTestedWeight'] = ele['samplesWeight']['avgTestedWeight'];\n          ele['numberOfSamples'] = ele['samplesWeight']['numberOfSamples'];\n          ele['sampleWeights'] = ele['samplesWeight']['sampleWeights'] ? ele['samplesWeight']['sampleWeights'].filter(amou => amou.amount) : null; // if(ele['samplesWeight'].hasOwnProperty('avgWeight')) {\n          //     ele['avgTestedWeight'] = ele['samplesWeight']['avgWeight'];\n          //     ele['numberOfSamples'] = ele['samplesWeight']['numberOfSamples'];\n          //     if(ele['samplesWeight']['aLotSamples'] && ele['samplesWeight']['aLotSamples'].length) {\n          //         ele['avgTestedWeight'] = (+ele['avgTestedWeight'] + ((ele['samplesWeight']['aLotSamples'].reduce((b, c) => +b + +c['value'] + +ele['unitAmount']['amount'], 0))/ele['samplesWeight']['aLotSamples'].length))/2;\n          //         ele['numberOfSamples'] = ele['numberOfSamples'] + ele['samplesWeight']['aLotSamples'].length;\n          //     }\n          // } else if(ele['samplesWeight'].hasOwnProperty('aLotSamples')) {\n          //     ele['avgTestedWeight'] = (ele['samplesWeight']['aLotSamples'].reduce((b, c) => +b + +c['value'] + +ele['unitAmount']['amount'], 0))/ele['samplesWeight']['aLotSamples'].length;\n          //     ele['numberOfSamples'] = ele['samplesWeight']['aLotSamples'].length;\n          // }\n\n          delete ele['samplesWeight'];\n        }\n      });\n    });\n    this.localService.addReceiveCashewNoOrder(value).pipe(take(1)).subscribe(val => {\n      const dialogRef = this.dialog.open(ReceiptDialog, {\n        width: '80%',\n        data: {\n          receipt: val,\n          fromNew: true,\n          type: 'Cashew'\n        }\n      });\n      dialogRef.afterClosed().subscribe(data => {\n        if (data === \"Edit receive\" || data === \"Receive bouns\") {\n          this.router.navigate(['../ReceiveCOrder', {\n            poCode: val['poCode']['id'],\n            id: val['id']\n          }], {\n            relativeTo: this._Activatedroute\n          });\n        } else {\n          this.router.navigate(['../ReceiveCReports'], {\n            relativeTo: this._Activatedroute\n          });\n        }\n      });\n    });\n  }\n\n  ngOnDestroy() {\n    if (this.navigationSubscription) {\n      this.navigationSubscription.unsubscribe();\n    }\n  }\n\n}\n\nReceiveCAlone.ɵfac = function ReceiveCAlone_Factory(t) {\n  return new (t || ReceiveCAlone)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.ReceiptService), i0.ɵɵdirectiveInject(i3.Genral), i0.ɵɵdirectiveInject(i4.MatDialog));\n};\n\nReceiveCAlone.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ReceiveCAlone,\n  selectors: [[\"receive-c-alone\"]],\n  decls: 1,\n  vars: 1,\n  consts: function () {\n    let i18n_0;\n\n    if (typeof ngI18nClosureMode !== \"undefined\" && ngI18nClosureMode) {\n      const MSG_EXTERNAL_7335130938221311282$$SRC_APP_RECEIPT_RECEIVE_C_ALONE_COMPONENT_TS_1 = goog.getMsg(\"Receive Cashew Without Order\");\n      i18n_0 = MSG_EXTERNAL_7335130938221311282$$SRC_APP_RECEIPT_RECEIVE_C_ALONE_COMPONENT_TS_1;\n    } else {\n      i18n_0 = \"Receive Cashew Without Order\";\n    }\n\n    return [[\"mainLabel\", i18n_0, 3, \"fields\", \"submitForm\", 4, \"ngIf\"], [\"mainLabel\", i18n_0, 3, \"fields\", \"submitForm\"]];\n  },\n  template: function ReceiveCAlone_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, ReceiveCAlone_dynamic_form_0_Template, 1, 1, \"dynamic-form\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.isRealodReady);\n    }\n  },\n  directives: [i5.NgIf, i6.DynamicFormComponent],\n  encapsulation: 2\n});","map":{"version":3,"sources":["C:/Users/isral/OneDrive/Documents/AVC-FRONT/src/app/receipt/receive-c-alone.component.ts"],"names":["Validators","NavigationEnd","take","ReceiptDialog","i0","i1","i2","i3","i4","i5","i6","ReceiveCAlone_dynamic_form_0_Template","rf","ctx","_r2","ɵɵgetCurrentView","ɵɵelementStart","ɵɵlistener","ReceiveCAlone_dynamic_form_0_Template_dynamic_form_submitForm_0_listener","$event","ɵɵrestoreView","ctx_r1","ɵɵnextContext","submit","ɵɵelementEnd","ctx_r0","ɵɵproperty","regConfig","ReceiveCAlone","constructor","router","_Activatedroute","cdRef","localService","genral","dialog","isRealodReady","ngOnInit","type","inputType","options","findFreePoCodes","collections","label","name","validations","validator","required","message","value","getItemsCashew","getWearhouses","getMeasureUnit","navigationSubscription","events","subscribe","e","detectChanges","forEach","element","ele","filter","amou","amount","addReceiveCashewNoOrder","pipe","val","dialogRef","open","width","data","receipt","fromNew","afterClosed","navigate","poCode","id","relativeTo","ngOnDestroy","unsubscribe","ɵfac","ReceiveCAlone_Factory","t","ɵɵdirectiveInject","Router","ActivatedRoute","ChangeDetectorRef","ReceiptService","Genral","MatDialog","ɵcmp","ɵɵdefineComponent","selectors","decls","vars","consts","i18n_0","ngI18nClosureMode","MSG_EXTERNAL_7335130938221311282$$SRC_APP_RECEIPT_RECEIVE_C_ALONE_COMPONENT_TS_1","goog","getMsg","template","ReceiveCAlone_Template","ɵɵtemplate","directives","NgIf","DynamicFormComponent","encapsulation"],"mappings":"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","sourcesContent":["import { Validators } from '@angular/forms';\r\nimport { NavigationEnd } from '@angular/router';\r\nimport { take } from 'rxjs/operators';\r\nimport { ReceiptDialog } from './receipt-dialog.component';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/router\";\r\nimport * as i2 from \"./receipt.service\";\r\nimport * as i3 from \"../genral.service\";\r\nimport * as i4 from \"@angular/material/dialog\";\r\nimport * as i5 from \"@angular/common\";\r\nimport * as i6 from \"../components/dynamic-form/dynamic-form.component\";\r\nfunction ReceiveCAlone_dynamic_form_0_Template(rf, ctx) { if (rf & 1) {\r\n    const _r2 = i0.ɵɵgetCurrentView();\r\n    i0.ɵɵelementStart(0, \"dynamic-form\", 1);\r\n    i0.ɵɵlistener(\"submitForm\", function ReceiveCAlone_dynamic_form_0_Template_dynamic_form_submitForm_0_listener($event) { i0.ɵɵrestoreView(_r2); const ctx_r1 = i0.ɵɵnextContext(); return ctx_r1.submit($event); });\r\n    i0.ɵɵelementEnd();\r\n} if (rf & 2) {\r\n    const ctx_r0 = i0.ɵɵnextContext();\r\n    i0.ɵɵproperty(\"fields\", ctx_r0.regConfig);\r\n} }\r\nexport class ReceiveCAlone {\r\n    constructor(router, _Activatedroute, cdRef, localService, genral, dialog) {\r\n        this.router = router;\r\n        this._Activatedroute = _Activatedroute;\r\n        this.cdRef = cdRef;\r\n        this.localService = localService;\r\n        this.genral = genral;\r\n        this.dialog = dialog;\r\n        this.isRealodReady = true;\r\n    }\r\n    ngOnInit() {\r\n        this.regConfig = [\r\n            {\r\n                type: 'selectgroup',\r\n                inputType: 'supplierName',\r\n                options: this.localService.findFreePoCodes(),\r\n                collections: [\r\n                    {\r\n                        type: 'select',\r\n                        label: $localize `Supplier`,\r\n                    },\r\n                    {\r\n                        type: 'select',\r\n                        label: $localize `#PO`,\r\n                        name: 'poCode',\r\n                        collections: 'somewhere',\r\n                        validations: [\r\n                            {\r\n                                name: 'required',\r\n                                validator: Validators.required,\r\n                                message: $localize `PO code Required`,\r\n                            }\r\n                        ]\r\n                    },\r\n                ]\r\n            },\r\n            {\r\n                type: 'date',\r\n                label: $localize `Receiving date`,\r\n                value: 'timeNow',\r\n                name: 'recordedTime',\r\n                options: 'withTime',\r\n                validations: [\r\n                    {\r\n                        name: 'required',\r\n                        validator: Validators.required,\r\n                        message: $localize `Receiving date Required`,\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                type: 'bigexpand',\r\n                label: $localize `Receive product`,\r\n                name: 'receiptItems',\r\n                value: 'required',\r\n                collections: [\r\n                    {\r\n                        type: 'select',\r\n                        label: $localize `Item descrption`,\r\n                        name: 'item',\r\n                        collections: 'somewhere',\r\n                        options: this.genral.getItemsCashew('Raw'),\r\n                    },\r\n                    {\r\n                        type: 'selectMU',\r\n                        label: $localize `Weight unit`,\r\n                        name: 'measureUnit',\r\n                    },\r\n                    {\r\n                        type: 'inputselect',\r\n                        name: 'extraRequested',\r\n                        collections: [\r\n                            {\r\n                                type: 'input',\r\n                                label: $localize `Extra requseted`,\r\n                                name: 'amount',\r\n                                inputType: 'numeric',\r\n                                options: 3,\r\n                            },\r\n                            {\r\n                                type: 'select',\r\n                                label: $localize `Weight unit`,\r\n                                name: 'measureUnit',\r\n                                options: ['KG', 'LBS'],\r\n                            },\r\n                        ]\r\n                    },\r\n                    {\r\n                        type: 'popup',\r\n                        label: $localize `Extra received`,\r\n                        name: 'bouns',\r\n                        collections: [\r\n                            {\r\n                                type: 'bigexpand',\r\n                                name: 'extraAdded',\r\n                                options: 'Inline',\r\n                                collections: [\r\n                                    {\r\n                                        type: 'input',\r\n                                        label: $localize `Bag weight`,\r\n                                        name: 'unitAmount',\r\n                                        inputType: 'numeric',\r\n                                        options: 3,\r\n                                    },\r\n                                    {\r\n                                        type: 'input',\r\n                                        label: $localize `Number of bags`,\r\n                                        name: 'numberUnits',\r\n                                        inputType: 'numeric',\r\n                                        options: 3,\r\n                                    },\r\n                                    {\r\n                                        type: 'select',\r\n                                        label: $localize `Warehouse location`,\r\n                                        name: 'warehouseLocation',\r\n                                        collections: 'somewhere',\r\n                                        options: this.genral.getWearhouses(),\r\n                                    },\r\n                                    {\r\n                                        type: 'divider',\r\n                                        inputType: 'divide'\r\n                                    },\r\n                                ],\r\n                                validations: [\r\n                                    {\r\n                                        name: 'unitAmount',\r\n                                        message: $localize `a received storage must have unit weight and number of bags`,\r\n                                    },\r\n                                    {\r\n                                        name: 'numberUnits',\r\n                                    },\r\n                                ]\r\n                            },\r\n                            {\r\n                                type: 'button',\r\n                                label: $localize `Save`,\r\n                                name: 'submit',\r\n                            }\r\n                        ]\r\n                    },\r\n                    {\r\n                        type: 'divider',\r\n                        inputType: 'newlinespace'\r\n                    },\r\n                    {\r\n                        type: 'bigexpand',\r\n                        label: $localize `Amounts`,\r\n                        name: 'storageForms',\r\n                        options: 'Inline',\r\n                        collections: [\r\n                            {\r\n                                type: 'input',\r\n                                label: $localize `Bag weight`,\r\n                                name: 'unitAmount',\r\n                                inputType: 'numeric',\r\n                                options: 3,\r\n                            },\r\n                            {\r\n                                type: 'input',\r\n                                label: $localize `Number of bags`,\r\n                                name: 'numberUnits',\r\n                                inputType: 'numeric',\r\n                                options: 3,\r\n                            },\r\n                            {\r\n                                type: 'select',\r\n                                label: $localize `Warehouse location`,\r\n                                name: 'warehouseLocation',\r\n                                collections: 'somewhere',\r\n                                options: this.genral.getWearhouses(),\r\n                            },\r\n                            {\r\n                                type: 'popup',\r\n                                label: $localize `Samples`,\r\n                                name: 'samplesWeight',\r\n                                inputType: true,\r\n                                collections: [\r\n                                    // {\r\n                                    //     type: 'array',\r\n                                    //     label: 'Empty bag weight',\r\n                                    //     name: 'sampleContainerWeight',\r\n                                    //     inputType: 'numeric',\r\n                                    //     options: 3,\r\n                                    // },\r\n                                    {\r\n                                        type: 'arrayordinal',\r\n                                        label: $localize `Empty bag weights`,\r\n                                        inputType: 'inline',\r\n                                        name: 'sampleContainerWeights',\r\n                                        options: 3,\r\n                                        collections: 1,\r\n                                    },\r\n                                    {\r\n                                        type: 'arrayordinal',\r\n                                        label: $localize `Samples (+-from unit weight)`,\r\n                                        // inputType: 'numeric',\r\n                                        name: 'sampleWeights',\r\n                                        options: 3,\r\n                                        collections: 30,\r\n                                    },\r\n                                    {\r\n                                        type: 'input',\r\n                                        label: $localize `Avrage weight (full weight)`,\r\n                                        name: 'avgTestedWeight',\r\n                                        inputType: 'numeric',\r\n                                        options: 3,\r\n                                    },\r\n                                    {\r\n                                        type: 'input',\r\n                                        label: $localize `number of samples (if put avrage)`,\r\n                                        name: 'numberOfSamples',\r\n                                        inputType: 'numeric',\r\n                                    },\r\n                                    {\r\n                                        type: 'button',\r\n                                        label: $localize `Submit`,\r\n                                        name: 'submit',\r\n                                    }\r\n                                ]\r\n                            },\r\n                            {\r\n                                type: 'divider',\r\n                                inputType: 'divide'\r\n                            },\r\n                        ],\r\n                        validations: [\r\n                            {\r\n                                name: 'unitAmount',\r\n                                message: $localize `a received storage must have weight and number of bags`,\r\n                            },\r\n                            {\r\n                                name: 'numberUnits',\r\n                            },\r\n                        ]\r\n                    },\r\n                    {\r\n                        type: 'divider',\r\n                        inputType: 'titel',\r\n                        label: $localize `Invoice amounts`\r\n                    },\r\n                    {\r\n                        type: 'inputselect',\r\n                        name: 'receivedOrderUnits',\r\n                        collections: [\r\n                            {\r\n                                type: 'input',\r\n                                label: $localize `Payable weight`,\r\n                                name: 'amount',\r\n                                inputType: 'numeric',\r\n                                options: 3,\r\n                                validations: [\r\n                                    {\r\n                                        name: 'required',\r\n                                        validator: Validators.required,\r\n                                        message: $localize `Payable weight Required`,\r\n                                    }\r\n                                ]\r\n                            },\r\n                            {\r\n                                type: 'select',\r\n                                label: $localize `Measure unit`,\r\n                                name: 'measureUnit',\r\n                                value: 'LBS',\r\n                                options: this.genral.getMeasureUnit(),\r\n                            },\r\n                        ]\r\n                    },\r\n                    {\r\n                        type: 'inputselect',\r\n                        name: 'unitPrice',\r\n                        collections: [\r\n                            {\r\n                                type: 'input',\r\n                                label: $localize `Price per unit`,\r\n                                name: 'amount',\r\n                                inputType: 'numeric',\r\n                                options: 3,\r\n                            },\r\n                            {\r\n                                type: 'select',\r\n                                label: $localize `Currency`,\r\n                                name: 'currency',\r\n                                options: ['USD', 'VND'],\r\n                            },\r\n                        ]\r\n                    },\r\n                    {\r\n                        type: 'divider',\r\n                        inputType: 'divide'\r\n                    },\r\n                ],\r\n                validations: [\r\n                    {\r\n                        name: 'item',\r\n                        message: $localize `a received item must have an item, and at least one storage`,\r\n                    },\r\n                    {\r\n                        name: 'measureUnit',\r\n                    },\r\n                    {\r\n                        name: 'storageForms',\r\n                        validator: [\r\n                            {\r\n                                name: 'unitAmount',\r\n                            },\r\n                            {\r\n                                name: 'numberUnits',\r\n                            },\r\n                        ],\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                type: 'button',\r\n                label: $localize `Submit`,\r\n                name: 'submit',\r\n            }\r\n        ];\r\n        this.navigationSubscription = this.router.events.subscribe((e) => {\r\n            // If it is a NavigationEnd event re-initalise the component\r\n            if (e instanceof NavigationEnd) {\r\n                this.isRealodReady = false;\r\n                this.cdRef.detectChanges();\r\n                this.isRealodReady = true;\r\n            }\r\n        });\r\n    }\r\n    submit(value) {\r\n        value['receiptItems'].forEach(element => {\r\n            if (element['bouns']) {\r\n                element['extraAdded'] = element['bouns']['extraAdded'];\r\n                delete element['bouns'];\r\n            }\r\n            if (!element['extraRequested']['amount']) {\r\n                delete element['extraRequested'];\r\n            }\r\n            if (!element['receivedOrderUnits']['amount']) {\r\n                delete element['receivedOrderUnits'];\r\n            }\r\n            if (!element['unitPrice']['amount']) {\r\n                delete element['unitPrice'];\r\n            }\r\n            element['storageForms'].forEach(ele => {\r\n                if (ele['samplesWeight']) {\r\n                    ele['sampleContainerWeights'] = ele['samplesWeight']['sampleContainerWeights'] ? ele['samplesWeight']['sampleContainerWeights'].filter(amou => amou.amount) : null;\r\n                    ele['avgTestedWeight'] = ele['samplesWeight']['avgTestedWeight'];\r\n                    ele['numberOfSamples'] = ele['samplesWeight']['numberOfSamples'];\r\n                    ele['sampleWeights'] = ele['samplesWeight']['sampleWeights'] ? ele['samplesWeight']['sampleWeights'].filter(amou => amou.amount) : null;\r\n                    // if(ele['samplesWeight'].hasOwnProperty('avgWeight')) {\r\n                    //     ele['avgTestedWeight'] = ele['samplesWeight']['avgWeight'];\r\n                    //     ele['numberOfSamples'] = ele['samplesWeight']['numberOfSamples'];\r\n                    //     if(ele['samplesWeight']['aLotSamples'] && ele['samplesWeight']['aLotSamples'].length) {\r\n                    //         ele['avgTestedWeight'] = (+ele['avgTestedWeight'] + ((ele['samplesWeight']['aLotSamples'].reduce((b, c) => +b + +c['value'] + +ele['unitAmount']['amount'], 0))/ele['samplesWeight']['aLotSamples'].length))/2;\r\n                    //         ele['numberOfSamples'] = ele['numberOfSamples'] + ele['samplesWeight']['aLotSamples'].length;\r\n                    //     }\r\n                    // } else if(ele['samplesWeight'].hasOwnProperty('aLotSamples')) {\r\n                    //     ele['avgTestedWeight'] = (ele['samplesWeight']['aLotSamples'].reduce((b, c) => +b + +c['value'] + +ele['unitAmount']['amount'], 0))/ele['samplesWeight']['aLotSamples'].length;\r\n                    //     ele['numberOfSamples'] = ele['samplesWeight']['aLotSamples'].length;\r\n                    // }\r\n                    delete ele['samplesWeight'];\r\n                }\r\n            });\r\n        });\r\n        this.localService.addReceiveCashewNoOrder(value).pipe(take(1)).subscribe(val => {\r\n            const dialogRef = this.dialog.open(ReceiptDialog, {\r\n                width: '80%',\r\n                data: { receipt: val, fromNew: true, type: 'Cashew' }\r\n            });\r\n            dialogRef.afterClosed().subscribe(data => {\r\n                if (data === $localize `Edit receive` || data === $localize `Receive bouns`) {\r\n                    this.router.navigate(['../ReceiveCOrder', { poCode: val['poCode']['id'], id: val['id'] }], { relativeTo: this._Activatedroute });\r\n                }\r\n                else {\r\n                    this.router.navigate(['../ReceiveCReports'], { relativeTo: this._Activatedroute });\r\n                }\r\n            });\r\n        });\r\n    }\r\n    ngOnDestroy() {\r\n        if (this.navigationSubscription) {\r\n            this.navigationSubscription.unsubscribe();\r\n        }\r\n    }\r\n}\r\nReceiveCAlone.ɵfac = function ReceiveCAlone_Factory(t) { return new (t || ReceiveCAlone)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.ReceiptService), i0.ɵɵdirectiveInject(i3.Genral), i0.ɵɵdirectiveInject(i4.MatDialog)); };\r\nReceiveCAlone.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: ReceiveCAlone, selectors: [[\"receive-c-alone\"]], decls: 1, vars: 1, consts: function () { let i18n_0; if (typeof ngI18nClosureMode !== \"undefined\" && ngI18nClosureMode) {\r\n        const MSG_EXTERNAL_7335130938221311282$$SRC_APP_RECEIPT_RECEIVE_C_ALONE_COMPONENT_TS_1 = goog.getMsg(\"Receive Cashew Without Order\");\r\n        i18n_0 = MSG_EXTERNAL_7335130938221311282$$SRC_APP_RECEIPT_RECEIVE_C_ALONE_COMPONENT_TS_1;\r\n    }\r\n    else {\r\n        i18n_0 = $localize `:␟edf346220f0449faec59ec38dd49beda19958c63␟7335130938221311282:Receive Cashew Without Order`;\r\n    } return [[\"mainLabel\", i18n_0, 3, \"fields\", \"submitForm\", 4, \"ngIf\"], [\"mainLabel\", i18n_0, 3, \"fields\", \"submitForm\"]]; }, template: function ReceiveCAlone_Template(rf, ctx) { if (rf & 1) {\r\n        i0.ɵɵtemplate(0, ReceiveCAlone_dynamic_form_0_Template, 1, 1, \"dynamic-form\", 0);\r\n    } if (rf & 2) {\r\n        i0.ɵɵproperty(\"ngIf\", ctx.isRealodReady);\r\n    } }, directives: [i5.NgIf, i6.DynamicFormComponent], encapsulation: 2 });\r\n"]},"metadata":{},"sourceType":"module"}