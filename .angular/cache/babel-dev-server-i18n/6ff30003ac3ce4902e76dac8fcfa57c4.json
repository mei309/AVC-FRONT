{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { NavigationEnd } from '@angular/router';\nimport { cloneDeep } from 'lodash-es';\nimport { take } from 'rxjs/operators';\nimport { QcDetailsDialogComponent } from './qc-details-dialog.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"./qc.service\";\nimport * as i3 from \"../genral.service\";\nimport * as i4 from \"@angular/material/dialog\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"../components/dynamic-form/dynamic-form.component\";\n\nfunction QcReceiveComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"dynamic-form\", 1);\n    i0.ɵɵlistener(\"submitForm\", function QcReceiveComponent_div_0_Template_dynamic_form_submitForm_1_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return ctx_r1.submit($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"fields\", ctx_r0.regConfig)(\"mainLabel\", ctx_r0.type)(\"putData\", ctx_r0.putData);\n  }\n} // tslint:disable-next-line: component-class-suffix\n\n\nexport class QcReceiveComponent {\n  constructor(router, _Activatedroute, cdRef, localService, genral, dialog) {\n    this.router = router;\n    this._Activatedroute = _Activatedroute;\n    this.cdRef = cdRef;\n    this.localService = localService;\n    this.genral = genral;\n    this.dialog = dialog;\n    this.isDataAvailable = false;\n    this.type = 'QC receiving (weights)';\n  }\n\n  submit(value) {\n    if (value.hasOwnProperty('processItems')) {\n      value['processItems'][0]['item'] = value['testedItems'][0]['item'];\n    } // value['percentageItems']['testedItemsP'].forEach(element => {\n    //     element['precentage'] = true;\n    // });\n    // if(value['testedItemsW']){\n    //     value['testedItems'] = value['testedItemsW'].concat(value['percentageItems']['testedItemsP']);\n    // } else {\n    //     value['testedItems'] = value['percentageItems']['testedItemsP'];\n    // }\n    // delete value['percentageItems'];\n    // delete value['testedItemsW'];\n\n\n    const fromNew = this.putData === null || this.putData === undefined;\n\n    if (this.type === 'QC receiving (weights)') {\n      // value['localType']\n      this.localService.addEditCashewReceiveCheck(value, fromNew).pipe(take(1)).subscribe(val => {\n        const dialogRef = this.dialog.open(QcDetailsDialogComponent, {\n          width: '80%',\n          data: {\n            qcCheck: cloneDeep(val),\n            fromNew: true,\n            type: \"Raw cashew check\"\n          }\n        });\n        dialogRef.afterClosed().subscribe(data => {\n          if (data === \"Edit\") {\n            this.isDataAvailable = false;\n            this.putData = val;\n            this.cdRef.detectChanges();\n            this.isDataAvailable = true;\n          } else {\n            this.router.navigate(['../AllQC', {\n              number: 0\n            }], {\n              relativeTo: this._Activatedroute\n            });\n          }\n        });\n      });\n    } else {\n      this.localService.addEditCashewRoastCheck(value, fromNew).pipe(take(1)).subscribe(val => {\n        const dialogRef = this.dialog.open(QcDetailsDialogComponent, {\n          width: '80%',\n          data: {\n            qcCheck: cloneDeep(val),\n            fromNew: true,\n            type: \"Roast cashew check\"\n          }\n        });\n        dialogRef.afterClosed().subscribe(data => {\n          if (data === \"Edit\") {\n            this.isDataAvailable = false;\n            this.putData = val;\n            this.cdRef.detectChanges();\n            this.isDataAvailable = true;\n          } else {\n            this.router.navigate(['../AllQC', {\n              number: 1\n            }], {\n              relativeTo: this._Activatedroute\n            });\n          }\n        });\n      });\n    }\n  }\n\n  ngOnInit() {\n    this._Activatedroute.paramMap.pipe(take(1)).subscribe(params => {\n      if (params.get('id')) {\n        var id = +params.get('id');\n        this.localService.getQcCheck(id).pipe(take(1)).subscribe(val => {\n          // var arrWeight = [];\n          // var arrPercentage = [];\n          // val['testedItems'].forEach(element => {\n          //     if(element['precentage']) {\n          //         arrWeight.push(element);\n          //     } else {\n          //         arrPercentage.push(element);\n          //     }\n          // });\n          // delete val['testedItems'];\n          // val['testedItemsW'] = arrWeight;\n          // val['testedItemsP'] = arrPercentage;\n          // val['percentageItems'] = {testedItemsP: arrPercentage};\n          this.putData = val;\n          this.isDataAvailable = true;\n        });\n      } else {\n        this.isDataAvailable = true;\n      }\n\n      if (params.get('roast')) {\n        this.type = 'QC roasting (weights)';\n        this.preperReg();\n        this.regConfig.splice(2, 1);\n      } else {\n        this.preperReg();\n      }\n    });\n\n    this.navigationSubscription = this.router.events.subscribe(e => {\n      // If it is a NavigationEnd event re-initalise the component\n      if (e instanceof NavigationEnd) {\n        this.isDataAvailable = false;\n        this.putData = null;\n\n        this._Activatedroute.paramMap.pipe(take(1)).subscribe(params => {\n          if (params.get('roast')) {\n            if (this.type === 'QC receiving (weights)') {\n              this.type = 'QC roasting (weights)';\n              this.preperReg();\n              this.regConfig.splice(2, 1);\n            }\n          } else {\n            if (this.type === 'QC roasting (weights)') {\n              this.type = 'QC receiving (weights)';\n              this.preperReg();\n            }\n          }\n        });\n\n        this.cdRef.detectChanges();\n        this.isDataAvailable = true;\n      }\n    });\n  }\n\n  preperReg() {\n    this.regConfig = [{\n      type: 'selectgroup',\n      inputType: 'supplierName',\n      label: 'withAllPos',\n      options: this.localService.getPoCashew(this.type.startsWith('QC roasting')),\n      disable: true,\n      collections: [{\n        type: 'select',\n        label: \"Supplier\"\n      }, {\n        type: 'select',\n        label: \"#PO\",\n        name: 'poCode',\n        collections: 'somewhere',\n        validations: [{\n          name: 'required',\n          validator: Validators.required,\n          message: \"#PO Required\"\n        }]\n      }]\n    }, {\n      type: 'date',\n      label: \"Date\",\n      value: 'timeNow',\n      name: 'recordedTime',\n      options: 'withTime',\n      // disable: true,\n      validations: [{\n        name: 'required',\n        validator: Validators.required,\n        message: \"Date Required\"\n      }]\n    }, {\n      type: 'radiobutton',\n      name: 'checkedBy',\n      label: \"Checked by\",\n      value: 'avc lab',\n      options: this.genral.getQcCheckOrganzition(),\n      validations: [{\n        name: 'required',\n        validator: Validators.required,\n        message: \"Required\"\n      }]\n    }, {\n      type: 'input',\n      label: \"Inspector\",\n      name: 'inspector'\n    }, {\n      type: 'input',\n      label: \"Sample taker\",\n      name: 'sampleTaker'\n    }, {\n      type: 'select',\n      label: \"Production line\",\n      value: 'firstVal',\n      name: 'productionLine',\n      options: this.genral.getProductionLine('QC_CHECK'),\n      validations: [{\n        name: 'required',\n        validator: Validators.required,\n        message: \"Production line Required\"\n      }]\n    }, {\n      type: 'bigexpand',\n      name: 'testedItems',\n      label: \"Weights\",\n      options: 'tabs',\n      collections: [{\n        type: 'select',\n        label: \"Item descrption\",\n        name: 'item',\n        collections: 'somewhere',\n        options: this.localService.getItemsCashewBulk(this.type.startsWith('QC roasting')) // disable: true,\n\n      }, {\n        type: 'input',\n        label: \"Number of samples\",\n        name: 'numberOfSamples',\n        inputType: 'numeric'\n      }, {\n        type: 'input',\n        label: \"Sample Weight\",\n        name: 'sampleWeight',\n        inputType: 'numeric',\n        options: 3\n      }, {\n        type: 'selectNormal',\n        label: \"Weight unit\",\n        name: 'measureUnit',\n        options: ['OZ', 'GRAM', 'LBS']\n      }, {\n        type: 'percentinput',\n        label: \"Humidity\",\n        name: 'humidity'\n      }, {\n        type: 'input',\n        label: \"Whole count per Lb\",\n        name: 'wholeCountPerLb',\n        inputType: 'numeric'\n      }, {\n        type: 'inputtopercentage',\n        label: \"Small size\",\n        name: 'smallSize',\n        collections: 'wholeCountPerLb'\n      }, {\n        type: 'inputtopercentage',\n        label: \"WS\",\n        name: 'ws',\n        inputType: 'measureUnit',\n        options: 3,\n        collections: 'sampleWeight'\n      }, {\n        type: 'inputtopercentage',\n        label: \"LP\",\n        name: 'lp',\n        inputType: 'measureUnit',\n        options: 3,\n        collections: 'sampleWeight'\n      }, {\n        type: 'inputtopercentage',\n        label: \"Breakage\",\n        name: 'breakage',\n        inputType: 'measureUnit',\n        options: 3,\n        collections: 'sampleWeight'\n      }, {\n        type: 'inputtopercentage',\n        label: \"Foreign material\",\n        name: 'foreignMaterial',\n        inputType: 'measureUnit',\n        options: 3,\n        collections: 'sampleWeight'\n      }, {\n        type: 'calculatefew',\n        name: 'damage',\n        label: \"Damage\",\n        options: 'measureUnit',\n        inputType: '+',\n        value: 'sampleWeight',\n        collections: [{\n          type: 'input',\n          label: \"Mold\",\n          name: 'mold',\n          inputType: 'numeric',\n          options: 3\n        }, {\n          type: 'input',\n          label: \"Dirty\",\n          name: 'dirty',\n          inputType: 'numeric',\n          options: 3\n        }, {\n          type: 'input',\n          label: \"Light dirty\",\n          name: 'lightDirty',\n          inputType: 'numeric',\n          options: 3\n        }, {\n          type: 'input',\n          label: \"Deacy\",\n          name: 'decay',\n          inputType: 'numeric',\n          options: 3\n        }, {\n          type: 'input',\n          label: \"Insect damage\",\n          name: 'insectDamage',\n          inputType: 'numeric',\n          options: 3\n        }, {\n          type: 'input',\n          label: \"Testa\",\n          name: 'testa',\n          inputType: 'numeric',\n          options: 3\n        }]\n      }, {\n        type: 'calculatefew',\n        name: 'defects',\n        label: \"Defects\",\n        options: 'measureUnit',\n        inputType: '+',\n        value: 'sampleWeight',\n        collections: [{\n          type: 'input',\n          label: \"Scrohed\",\n          name: 'scorched',\n          inputType: 'numeric',\n          options: 3\n        }, {\n          type: 'input',\n          label: \"Deep cut\",\n          name: 'deepCut',\n          inputType: 'numeric',\n          options: 3\n        }, {\n          type: 'input',\n          label: \"Off colour\",\n          name: 'offColour',\n          inputType: 'numeric',\n          options: 3\n        }, {\n          type: 'input',\n          label: \"Shrivel\",\n          name: 'shrivel',\n          inputType: 'numeric',\n          options: 3\n        }, {\n          type: 'input',\n          label: \"Desert/dark\",\n          name: 'desert',\n          inputType: 'numeric',\n          options: 3\n        }, {\n          type: 'input',\n          label: \"Deep spot\",\n          name: 'deepSpot',\n          inputType: 'numeric',\n          options: 3\n        }]\n      }, {\n        type: 'inputtopercentage',\n        label: \"Total weight lost after roasting\",\n        name: 'rostingWeightLoss',\n        inputType: 'measureUnit',\n        options: 3,\n        collections: 'sampleWeight'\n      }, {\n        type: 'radiobutton',\n        label: \"Rosted color\",\n        name: 'colour',\n        options: ['NOT_OK', 'OK']\n      }, {\n        type: 'radiobutton',\n        label: \"Flavour\",\n        name: 'flavour',\n        options: ['NOT_OK', 'OK']\n      }],\n      validations: [{\n        name: 'item',\n        message: \"a check must have a item and sample weight\"\n      }, {\n        name: 'sampleWeight'\n      }, {\n        name: 'measureUnit'\n      }]\n    }, // {\n    //     type: 'popup',\n    //     label: 'Percentage testes',\n    //     name: 'percentageItems',\n    //     collections: [\n    //         {\n    //             type: 'bigexpand',\n    //             name: 'testedItemsP',\n    //             label: 'Percentage',\n    //             options: 'tabs',\n    //             collections: [\n    //                 {\n    //                     type: 'select',\n    //                     label: 'Item descrption',\n    //                     name: 'item',\n    //                     options: this.genral.getAllItemsCashew(),\n    //                     // disable: true,\n    //                 },\n    //                 {\n    //                     type: 'input',\n    //                     label: 'Number of samples',\n    //                     name: 'numberOfSamples',\n    //                     inputType: 'numeric',\n    //                 },\n    //                 {\n    //                     type: 'input',\n    //                     label: 'Sample Weight',\n    //                     name: 'sampleWeight',\n    //                     inputType: 'numeric',\n    //                     options: 3,\n    //                 },\n    //                 {\n    //                     type: 'selectNormal',\n    //                     label: 'Weight unit',\n    //                     name: 'measureUnit',\n    //                     options: ['OZ', 'GRAM'],\n    //                 },\n    //                 {\n    //                     type: 'input',\n    //                     label: 'Whole count per Lb',\n    //                     name: 'wholeCountPerLb',\n    //                     inputType: 'numeric',\n    //                 },\n    //                 {\n    //                     type: 'percentinput',\n    //                     label: 'Small size',\n    //                     name: 'smallSize',\n    //                 },\n    //                 {\n    //                     type: 'percentinput',\n    //                     label: 'WS',\n    //                     name: 'ws',\n    //                 },\n    //                 {\n    //                     type: 'percentinput',\n    //                     label: 'LP',\n    //                     name: 'lp',\n    //                 },\n    //                 {\n    //                     type: 'percentinput',\n    //                     label: 'Humidity',\n    //                     name: 'humidity',\n    //                 },\n    //                 {\n    //                     type: 'percentinput',\n    //                     label: 'Breakage',\n    //                     name: 'breakage',\n    //                 },\n    //                 {\n    //                     type: 'percentinput',\n    //                     label: 'Foreign material',\n    //                     name: 'foreignMaterial',\n    //                 },\n    //                 {\n    //                     type: 'calculatefew',\n    //                     name: 'damage',\n    //                     label: 'Damage (%)',\n    //                     inputType: '+',\n    //                     options: 'box',\n    //                     collections: [\n    //                         {\n    //                             type: 'percentinput',\n    //                             label: 'Mold',\n    //                             name: 'mold',\n    //                         },\n    //                         {\n    //                             type: 'percentinput',\n    //                             label: 'Dirty',\n    //                             name: 'dirty',\n    //                         },\n    //                         {\n    //                             type: 'percentinput',\n    //                             label: 'Light dirty',\n    //                             name: 'lightDirty',\n    //                         },\n    //                         {\n    //                             type: 'percentinput',\n    //                             label: 'Deacy',\n    //                             name: 'decay',\n    //                         },\n    //                         {\n    //                             type: 'percentinput',\n    //                             label: 'Insect damage',\n    //                             name: 'insectDamage',\n    //                         },\n    //                         {\n    //                             type: 'percentinput',\n    //                             label: 'Testa',\n    //                             name: 'testa',\n    //                         },\n    //                     ]\n    //                 },\n    //                 {\n    //                     type: 'calculatefew',\n    //                     name: 'defects',\n    //                     label: 'Defects',\n    //                     inputType: '+',\n    //                     options: 'box',\n    //                     collections: [\n    //                         {\n    //                             type: 'percentinput',\n    //                             label: 'Scrohed',\n    //                             name: 'scorched',\n    //                         },\n    //                         {\n    //                             type: 'percentinput',\n    //                             label: 'Deep cut',\n    //                             name: 'deepCut',\n    //                         },\n    //                         {\n    //                             type: 'percentinput',\n    //                             label: 'Off colour',\n    //                             name: 'offColour',\n    //                         },\n    //                         {\n    //                             type: 'percentinput',\n    //                             label: 'Shrivel',\n    //                             name: 'shrivel',\n    //                         },\n    //                         {\n    //                             type: 'percentinput',\n    //                             label: 'Desert/dark',\n    //                             name: 'desert',\n    //                         },\n    //                         {\n    //                             type: 'percentinput',\n    //                             label: 'Deep spot',\n    //                             name: 'deepSpot',\n    //                         },\n    //                     ]\n    //                 },\n    //                 {\n    //                     type: 'percentinput',\n    //                     label: 'Total weight lost after roasting',\n    //                     name: 'rostingWeightLoss',\n    //                 },\n    //                 {\n    //                     type: 'radiobutton',\n    //                     label: 'Rosted color',\n    //                     name: 'colour',\n    //                     options: ['NOT_OK', 'OK'],\n    //                 },\n    //                 {\n    //                     type: 'radiobutton',\n    //                     label: 'Flavour',\n    //                     name: 'flavour',\n    //                     options: ['NOT_OK', 'OK'],\n    //                 },\n    //             ],\n    //             validations: [\n    //                 {\n    //                 name: 'item',\n    //                 message: 'a check must have a item and sample weight',\n    //                 },\n    //                 {\n    //                 name: 'sampleWeight',\n    //                 },\n    //                 {\n    //                     name: 'measureUnit',\n    //                 }\n    //             ]\n    //         },\n    //         {\n    //             type: 'button',\n    //             label: 'Submit',\n    //             name: 'submit',\n    //         }\n    //     ]\n    // },\n    {\n      type: 'bigexpand',\n      name: 'processItems',\n      label: \"Storage(if stored)\",\n      options: 'aloneNoAdd',\n      collections: [{\n        type: 'selectNormal',\n        label: \"Weight unit\",\n        name: 'measureUnit',\n        // inputType: 'item',\n        options: this.genral.getMeasureUnit()\n      }, {\n        type: 'bigexpand',\n        label: \"Amounts\",\n        name: 'storageForms',\n        options: 'aloneNoAddNoFrameInline',\n        collections: [{\n          type: 'input',\n          label: \"Number of units\",\n          name: 'numberUnits',\n          inputType: 'numeric',\n          options: 3\n        }, {\n          type: 'select',\n          label: \"Warehouse location\",\n          name: 'warehouseLocation',\n          collections: 'somewhere',\n          options: this.genral.getWearhouses()\n        }]\n      }, {\n        type: 'divider',\n        inputType: 'divide'\n      }]\n    }, {\n      type: 'button',\n      label: \"Submit\",\n      name: 'submit'\n    }];\n  }\n\n  ngOnDestroy() {\n    if (this.navigationSubscription) {\n      this.navigationSubscription.unsubscribe();\n    }\n  }\n\n}\n\nQcReceiveComponent.ɵfac = function QcReceiveComponent_Factory(t) {\n  return new (t || QcReceiveComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.QcService), i0.ɵɵdirectiveInject(i3.Genral), i0.ɵɵdirectiveInject(i4.MatDialog));\n};\n\nQcReceiveComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: QcReceiveComponent,\n  selectors: [[\"qc-receive\"]],\n  decls: 1,\n  vars: 1,\n  consts: [[4, \"ngIf\"], [3, \"fields\", \"mainLabel\", \"putData\", \"submitForm\"]],\n  template: function QcReceiveComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, QcReceiveComponent_div_0_Template, 2, 3, \"div\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.isDataAvailable);\n    }\n  },\n  directives: [i5.NgIf, i6.DynamicFormComponent],\n  encapsulation: 2\n});","map":{"version":3,"sources":["C:/Users/isral/OneDrive/Documents/AVC-FRONT/src/app/qc/qc-receive.component.ts"],"names":["Validators","NavigationEnd","cloneDeep","take","QcDetailsDialogComponent","i0","i1","i2","i3","i4","i5","i6","QcReceiveComponent_div_0_Template","rf","ctx","_r2","ɵɵgetCurrentView","ɵɵelementStart","ɵɵlistener","QcReceiveComponent_div_0_Template_dynamic_form_submitForm_1_listener","$event","ɵɵrestoreView","ctx_r1","ɵɵnextContext","submit","ɵɵelementEnd","ctx_r0","ɵɵadvance","ɵɵproperty","regConfig","type","putData","QcReceiveComponent","constructor","router","_Activatedroute","cdRef","localService","genral","dialog","isDataAvailable","value","hasOwnProperty","fromNew","undefined","addEditCashewReceiveCheck","pipe","subscribe","val","dialogRef","open","width","data","qcCheck","afterClosed","detectChanges","navigate","number","relativeTo","addEditCashewRoastCheck","ngOnInit","paramMap","params","get","id","getQcCheck","preperReg","splice","navigationSubscription","events","e","inputType","label","options","getPoCashew","startsWith","disable","collections","name","validations","validator","required","message","getQcCheckOrganzition","getProductionLine","getItemsCashewBulk","getMeasureUnit","getWearhouses","ngOnDestroy","unsubscribe","ɵfac","QcReceiveComponent_Factory","t","ɵɵdirectiveInject","Router","ActivatedRoute","ChangeDetectorRef","QcService","Genral","MatDialog","ɵcmp","ɵɵdefineComponent","selectors","decls","vars","consts","template","QcReceiveComponent_Template","ɵɵtemplate","directives","NgIf","DynamicFormComponent","encapsulation"],"mappings":"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","sourcesContent":["import { Validators } from '@angular/forms';\r\nimport { NavigationEnd } from '@angular/router';\r\nimport { cloneDeep } from 'lodash-es';\r\nimport { take } from 'rxjs/operators';\r\nimport { QcDetailsDialogComponent } from './qc-details-dialog.component';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/router\";\r\nimport * as i2 from \"./qc.service\";\r\nimport * as i3 from \"../genral.service\";\r\nimport * as i4 from \"@angular/material/dialog\";\r\nimport * as i5 from \"@angular/common\";\r\nimport * as i6 from \"../components/dynamic-form/dynamic-form.component\";\r\nfunction QcReceiveComponent_div_0_Template(rf, ctx) { if (rf & 1) {\r\n    const _r2 = i0.ɵɵgetCurrentView();\r\n    i0.ɵɵelementStart(0, \"div\");\r\n    i0.ɵɵelementStart(1, \"dynamic-form\", 1);\r\n    i0.ɵɵlistener(\"submitForm\", function QcReceiveComponent_div_0_Template_dynamic_form_submitForm_1_listener($event) { i0.ɵɵrestoreView(_r2); const ctx_r1 = i0.ɵɵnextContext(); return ctx_r1.submit($event); });\r\n    i0.ɵɵelementEnd();\r\n    i0.ɵɵelementEnd();\r\n} if (rf & 2) {\r\n    const ctx_r0 = i0.ɵɵnextContext();\r\n    i0.ɵɵadvance(1);\r\n    i0.ɵɵproperty(\"fields\", ctx_r0.regConfig)(\"mainLabel\", ctx_r0.type)(\"putData\", ctx_r0.putData);\r\n} }\r\n// tslint:disable-next-line: component-class-suffix\r\nexport class QcReceiveComponent {\r\n    constructor(router, _Activatedroute, cdRef, localService, genral, dialog) {\r\n        this.router = router;\r\n        this._Activatedroute = _Activatedroute;\r\n        this.cdRef = cdRef;\r\n        this.localService = localService;\r\n        this.genral = genral;\r\n        this.dialog = dialog;\r\n        this.isDataAvailable = false;\r\n        this.type = 'QC receiving (weights)';\r\n    }\r\n    submit(value) {\r\n        if (value.hasOwnProperty('processItems')) {\r\n            value['processItems'][0]['item'] = value['testedItems'][0]['item'];\r\n        }\r\n        // value['percentageItems']['testedItemsP'].forEach(element => {\r\n        //     element['precentage'] = true;\r\n        // });\r\n        // if(value['testedItemsW']){\r\n        //     value['testedItems'] = value['testedItemsW'].concat(value['percentageItems']['testedItemsP']);\r\n        // } else {\r\n        //     value['testedItems'] = value['percentageItems']['testedItemsP'];\r\n        // }\r\n        // delete value['percentageItems'];\r\n        // delete value['testedItemsW'];\r\n        const fromNew = this.putData === null || this.putData === undefined;\r\n        if (this.type === 'QC receiving (weights)') {\r\n            // value['localType']\r\n            this.localService.addEditCashewReceiveCheck(value, fromNew).pipe(take(1)).subscribe(val => {\r\n                const dialogRef = this.dialog.open(QcDetailsDialogComponent, {\r\n                    width: '80%',\r\n                    data: { qcCheck: cloneDeep(val), fromNew: true, type: $localize `Raw cashew check` }\r\n                });\r\n                dialogRef.afterClosed().subscribe(data => {\r\n                    if (data === $localize `Edit`) {\r\n                        this.isDataAvailable = false;\r\n                        this.putData = val;\r\n                        this.cdRef.detectChanges();\r\n                        this.isDataAvailable = true;\r\n                    }\r\n                    else {\r\n                        this.router.navigate(['../AllQC', { number: 0 }], { relativeTo: this._Activatedroute });\r\n                    }\r\n                });\r\n            });\r\n        }\r\n        else {\r\n            this.localService.addEditCashewRoastCheck(value, fromNew).pipe(take(1)).subscribe(val => {\r\n                const dialogRef = this.dialog.open(QcDetailsDialogComponent, {\r\n                    width: '80%',\r\n                    data: { qcCheck: cloneDeep(val), fromNew: true, type: $localize `Roast cashew check` }\r\n                });\r\n                dialogRef.afterClosed().subscribe(data => {\r\n                    if (data === $localize `Edit`) {\r\n                        this.isDataAvailable = false;\r\n                        this.putData = val;\r\n                        this.cdRef.detectChanges();\r\n                        this.isDataAvailable = true;\r\n                    }\r\n                    else {\r\n                        this.router.navigate(['../AllQC', { number: 1 }], { relativeTo: this._Activatedroute });\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    }\r\n    ngOnInit() {\r\n        this._Activatedroute.paramMap.pipe(take(1)).subscribe(params => {\r\n            if (params.get('id')) {\r\n                var id = +params.get('id');\r\n                this.localService.getQcCheck(id).pipe(take(1)).subscribe(val => {\r\n                    // var arrWeight = [];\r\n                    // var arrPercentage = [];\r\n                    // val['testedItems'].forEach(element => {\r\n                    //     if(element['precentage']) {\r\n                    //         arrWeight.push(element);\r\n                    //     } else {\r\n                    //         arrPercentage.push(element);\r\n                    //     }\r\n                    // });\r\n                    // delete val['testedItems'];\r\n                    // val['testedItemsW'] = arrWeight;\r\n                    // val['testedItemsP'] = arrPercentage;\r\n                    // val['percentageItems'] = {testedItemsP: arrPercentage};\r\n                    this.putData = val;\r\n                    this.isDataAvailable = true;\r\n                });\r\n            }\r\n            else {\r\n                this.isDataAvailable = true;\r\n            }\r\n            if (params.get('roast')) {\r\n                this.type = 'QC roasting (weights)';\r\n                this.preperReg();\r\n                this.regConfig.splice(2, 1);\r\n            }\r\n            else {\r\n                this.preperReg();\r\n            }\r\n        });\r\n        this.navigationSubscription = this.router.events.subscribe((e) => {\r\n            // If it is a NavigationEnd event re-initalise the component\r\n            if (e instanceof NavigationEnd) {\r\n                this.isDataAvailable = false;\r\n                this.putData = null;\r\n                this._Activatedroute.paramMap.pipe(take(1)).subscribe(params => {\r\n                    if (params.get('roast')) {\r\n                        if (this.type === 'QC receiving (weights)') {\r\n                            this.type = 'QC roasting (weights)';\r\n                            this.preperReg();\r\n                            this.regConfig.splice(2, 1);\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (this.type === 'QC roasting (weights)') {\r\n                            this.type = 'QC receiving (weights)';\r\n                            this.preperReg();\r\n                        }\r\n                    }\r\n                });\r\n                this.cdRef.detectChanges();\r\n                this.isDataAvailable = true;\r\n            }\r\n        });\r\n    }\r\n    preperReg() {\r\n        this.regConfig = [\r\n            {\r\n                type: 'selectgroup',\r\n                inputType: 'supplierName',\r\n                label: 'withAllPos',\r\n                options: this.localService.getPoCashew(this.type.startsWith('QC roasting')),\r\n                disable: true,\r\n                collections: [\r\n                    {\r\n                        type: 'select',\r\n                        label: $localize `Supplier`,\r\n                    },\r\n                    {\r\n                        type: 'select',\r\n                        label: $localize `#PO`,\r\n                        name: 'poCode',\r\n                        collections: 'somewhere',\r\n                        validations: [\r\n                            {\r\n                                name: 'required',\r\n                                validator: Validators.required,\r\n                                message: $localize `#PO Required`,\r\n                            }\r\n                        ]\r\n                    },\r\n                ]\r\n            },\r\n            {\r\n                type: 'date',\r\n                label: $localize `Date`,\r\n                value: 'timeNow',\r\n                name: 'recordedTime',\r\n                options: 'withTime',\r\n                // disable: true,\r\n                validations: [\r\n                    {\r\n                        name: 'required',\r\n                        validator: Validators.required,\r\n                        message: $localize `Date Required`,\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                type: 'radiobutton',\r\n                name: 'checkedBy',\r\n                label: $localize `Checked by`,\r\n                value: 'avc lab',\r\n                options: this.genral.getQcCheckOrganzition(),\r\n                validations: [\r\n                    {\r\n                        name: 'required',\r\n                        validator: Validators.required,\r\n                        message: $localize `Required`,\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                type: 'input',\r\n                label: $localize `Inspector`,\r\n                name: 'inspector',\r\n            },\r\n            {\r\n                type: 'input',\r\n                label: $localize `Sample taker`,\r\n                name: 'sampleTaker',\r\n            },\r\n            {\r\n                type: 'select',\r\n                label: $localize `Production line`,\r\n                value: 'firstVal',\r\n                name: 'productionLine',\r\n                options: this.genral.getProductionLine('QC_CHECK'),\r\n                validations: [\r\n                    {\r\n                        name: 'required',\r\n                        validator: Validators.required,\r\n                        message: $localize `Production line Required`,\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                type: 'bigexpand',\r\n                name: 'testedItems',\r\n                label: $localize `Weights`,\r\n                options: 'tabs',\r\n                collections: [\r\n                    {\r\n                        type: 'select',\r\n                        label: $localize `Item descrption`,\r\n                        name: 'item',\r\n                        collections: 'somewhere',\r\n                        options: this.localService.getItemsCashewBulk(this.type.startsWith('QC roasting')),\r\n                        // disable: true,\r\n                    },\r\n                    {\r\n                        type: 'input',\r\n                        label: $localize `Number of samples`,\r\n                        name: 'numberOfSamples',\r\n                        inputType: 'numeric',\r\n                    },\r\n                    {\r\n                        type: 'input',\r\n                        label: $localize `Sample Weight`,\r\n                        name: 'sampleWeight',\r\n                        inputType: 'numeric',\r\n                        options: 3,\r\n                    },\r\n                    {\r\n                        type: 'selectNormal',\r\n                        label: $localize `Weight unit`,\r\n                        name: 'measureUnit',\r\n                        options: ['OZ', 'GRAM', 'LBS'],\r\n                    },\r\n                    {\r\n                        type: 'percentinput',\r\n                        label: $localize `Humidity`,\r\n                        name: 'humidity',\r\n                    },\r\n                    {\r\n                        type: 'input',\r\n                        label: $localize `Whole count per Lb`,\r\n                        name: 'wholeCountPerLb',\r\n                        inputType: 'numeric',\r\n                    },\r\n                    {\r\n                        type: 'inputtopercentage',\r\n                        label: $localize `Small size`,\r\n                        name: 'smallSize',\r\n                        collections: 'wholeCountPerLb',\r\n                    },\r\n                    {\r\n                        type: 'inputtopercentage',\r\n                        label: $localize `WS`,\r\n                        name: 'ws',\r\n                        inputType: 'measureUnit',\r\n                        options: 3,\r\n                        collections: 'sampleWeight',\r\n                    },\r\n                    {\r\n                        type: 'inputtopercentage',\r\n                        label: $localize `LP`,\r\n                        name: 'lp',\r\n                        inputType: 'measureUnit',\r\n                        options: 3,\r\n                        collections: 'sampleWeight',\r\n                    },\r\n                    {\r\n                        type: 'inputtopercentage',\r\n                        label: $localize `Breakage`,\r\n                        name: 'breakage',\r\n                        inputType: 'measureUnit',\r\n                        options: 3,\r\n                        collections: 'sampleWeight',\r\n                    },\r\n                    {\r\n                        type: 'inputtopercentage',\r\n                        label: $localize `Foreign material`,\r\n                        name: 'foreignMaterial',\r\n                        inputType: 'measureUnit',\r\n                        options: 3,\r\n                        collections: 'sampleWeight',\r\n                    },\r\n                    {\r\n                        type: 'calculatefew',\r\n                        name: 'damage',\r\n                        label: $localize `Damage`,\r\n                        options: 'measureUnit',\r\n                        inputType: '+',\r\n                        value: 'sampleWeight',\r\n                        collections: [\r\n                            {\r\n                                type: 'input',\r\n                                label: $localize `Mold`,\r\n                                name: 'mold',\r\n                                inputType: 'numeric',\r\n                                options: 3,\r\n                            },\r\n                            {\r\n                                type: 'input',\r\n                                label: $localize `Dirty`,\r\n                                name: 'dirty',\r\n                                inputType: 'numeric',\r\n                                options: 3,\r\n                            },\r\n                            {\r\n                                type: 'input',\r\n                                label: $localize `Light dirty`,\r\n                                name: 'lightDirty',\r\n                                inputType: 'numeric',\r\n                                options: 3,\r\n                            },\r\n                            {\r\n                                type: 'input',\r\n                                label: $localize `Deacy`,\r\n                                name: 'decay',\r\n                                inputType: 'numeric',\r\n                                options: 3,\r\n                            },\r\n                            {\r\n                                type: 'input',\r\n                                label: $localize `Insect damage`,\r\n                                name: 'insectDamage',\r\n                                inputType: 'numeric',\r\n                                options: 3,\r\n                            },\r\n                            {\r\n                                type: 'input',\r\n                                label: $localize `Testa`,\r\n                                name: 'testa',\r\n                                inputType: 'numeric',\r\n                                options: 3,\r\n                            },\r\n                        ]\r\n                    },\r\n                    {\r\n                        type: 'calculatefew',\r\n                        name: 'defects',\r\n                        label: $localize `Defects`,\r\n                        options: 'measureUnit',\r\n                        inputType: '+',\r\n                        value: 'sampleWeight',\r\n                        collections: [\r\n                            {\r\n                                type: 'input',\r\n                                label: $localize `Scrohed`,\r\n                                name: 'scorched',\r\n                                inputType: 'numeric',\r\n                                options: 3,\r\n                            },\r\n                            {\r\n                                type: 'input',\r\n                                label: $localize `Deep cut`,\r\n                                name: 'deepCut',\r\n                                inputType: 'numeric',\r\n                                options: 3,\r\n                            },\r\n                            {\r\n                                type: 'input',\r\n                                label: $localize `Off colour`,\r\n                                name: 'offColour',\r\n                                inputType: 'numeric',\r\n                                options: 3,\r\n                            },\r\n                            {\r\n                                type: 'input',\r\n                                label: $localize `Shrivel`,\r\n                                name: 'shrivel',\r\n                                inputType: 'numeric',\r\n                                options: 3,\r\n                            },\r\n                            {\r\n                                type: 'input',\r\n                                label: $localize `Desert/dark`,\r\n                                name: 'desert',\r\n                                inputType: 'numeric',\r\n                                options: 3,\r\n                            },\r\n                            {\r\n                                type: 'input',\r\n                                label: $localize `Deep spot`,\r\n                                name: 'deepSpot',\r\n                                inputType: 'numeric',\r\n                                options: 3,\r\n                            },\r\n                        ]\r\n                    },\r\n                    {\r\n                        type: 'inputtopercentage',\r\n                        label: $localize `Total weight lost after roasting`,\r\n                        name: 'rostingWeightLoss',\r\n                        inputType: 'measureUnit',\r\n                        options: 3,\r\n                        collections: 'sampleWeight',\r\n                    },\r\n                    {\r\n                        type: 'radiobutton',\r\n                        label: $localize `Rosted color`,\r\n                        name: 'colour',\r\n                        options: ['NOT_OK', 'OK'],\r\n                    },\r\n                    {\r\n                        type: 'radiobutton',\r\n                        label: $localize `Flavour`,\r\n                        name: 'flavour',\r\n                        options: ['NOT_OK', 'OK'],\r\n                    },\r\n                ],\r\n                validations: [\r\n                    {\r\n                        name: 'item',\r\n                        message: $localize `a check must have a item and sample weight`,\r\n                    },\r\n                    {\r\n                        name: 'sampleWeight',\r\n                    },\r\n                    {\r\n                        name: 'measureUnit',\r\n                    }\r\n                ]\r\n            },\r\n            // {\r\n            //     type: 'popup',\r\n            //     label: 'Percentage testes',\r\n            //     name: 'percentageItems',\r\n            //     collections: [\r\n            //         {\r\n            //             type: 'bigexpand',\r\n            //             name: 'testedItemsP',\r\n            //             label: 'Percentage',\r\n            //             options: 'tabs',\r\n            //             collections: [\r\n            //                 {\r\n            //                     type: 'select',\r\n            //                     label: 'Item descrption',\r\n            //                     name: 'item',\r\n            //                     options: this.genral.getAllItemsCashew(),\r\n            //                     // disable: true,\r\n            //                 },\r\n            //                 {\r\n            //                     type: 'input',\r\n            //                     label: 'Number of samples',\r\n            //                     name: 'numberOfSamples',\r\n            //                     inputType: 'numeric',\r\n            //                 },\r\n            //                 {\r\n            //                     type: 'input',\r\n            //                     label: 'Sample Weight',\r\n            //                     name: 'sampleWeight',\r\n            //                     inputType: 'numeric',\r\n            //                     options: 3,\r\n            //                 },\r\n            //                 {\r\n            //                     type: 'selectNormal',\r\n            //                     label: 'Weight unit',\r\n            //                     name: 'measureUnit',\r\n            //                     options: ['OZ', 'GRAM'],\r\n            //                 },\r\n            //                 {\r\n            //                     type: 'input',\r\n            //                     label: 'Whole count per Lb',\r\n            //                     name: 'wholeCountPerLb',\r\n            //                     inputType: 'numeric',\r\n            //                 },\r\n            //                 {\r\n            //                     type: 'percentinput',\r\n            //                     label: 'Small size',\r\n            //                     name: 'smallSize',\r\n            //                 },\r\n            //                 {\r\n            //                     type: 'percentinput',\r\n            //                     label: 'WS',\r\n            //                     name: 'ws',\r\n            //                 },\r\n            //                 {\r\n            //                     type: 'percentinput',\r\n            //                     label: 'LP',\r\n            //                     name: 'lp',\r\n            //                 },\r\n            //                 {\r\n            //                     type: 'percentinput',\r\n            //                     label: 'Humidity',\r\n            //                     name: 'humidity',\r\n            //                 },\r\n            //                 {\r\n            //                     type: 'percentinput',\r\n            //                     label: 'Breakage',\r\n            //                     name: 'breakage',\r\n            //                 },\r\n            //                 {\r\n            //                     type: 'percentinput',\r\n            //                     label: 'Foreign material',\r\n            //                     name: 'foreignMaterial',\r\n            //                 },\r\n            //                 {\r\n            //                     type: 'calculatefew',\r\n            //                     name: 'damage',\r\n            //                     label: 'Damage (%)',\r\n            //                     inputType: '+',\r\n            //                     options: 'box',\r\n            //                     collections: [\r\n            //                         {\r\n            //                             type: 'percentinput',\r\n            //                             label: 'Mold',\r\n            //                             name: 'mold',\r\n            //                         },\r\n            //                         {\r\n            //                             type: 'percentinput',\r\n            //                             label: 'Dirty',\r\n            //                             name: 'dirty',\r\n            //                         },\r\n            //                         {\r\n            //                             type: 'percentinput',\r\n            //                             label: 'Light dirty',\r\n            //                             name: 'lightDirty',\r\n            //                         },\r\n            //                         {\r\n            //                             type: 'percentinput',\r\n            //                             label: 'Deacy',\r\n            //                             name: 'decay',\r\n            //                         },\r\n            //                         {\r\n            //                             type: 'percentinput',\r\n            //                             label: 'Insect damage',\r\n            //                             name: 'insectDamage',\r\n            //                         },\r\n            //                         {\r\n            //                             type: 'percentinput',\r\n            //                             label: 'Testa',\r\n            //                             name: 'testa',\r\n            //                         },\r\n            //                     ]\r\n            //                 },\r\n            //                 {\r\n            //                     type: 'calculatefew',\r\n            //                     name: 'defects',\r\n            //                     label: 'Defects',\r\n            //                     inputType: '+',\r\n            //                     options: 'box',\r\n            //                     collections: [\r\n            //                         {\r\n            //                             type: 'percentinput',\r\n            //                             label: 'Scrohed',\r\n            //                             name: 'scorched',\r\n            //                         },\r\n            //                         {\r\n            //                             type: 'percentinput',\r\n            //                             label: 'Deep cut',\r\n            //                             name: 'deepCut',\r\n            //                         },\r\n            //                         {\r\n            //                             type: 'percentinput',\r\n            //                             label: 'Off colour',\r\n            //                             name: 'offColour',\r\n            //                         },\r\n            //                         {\r\n            //                             type: 'percentinput',\r\n            //                             label: 'Shrivel',\r\n            //                             name: 'shrivel',\r\n            //                         },\r\n            //                         {\r\n            //                             type: 'percentinput',\r\n            //                             label: 'Desert/dark',\r\n            //                             name: 'desert',\r\n            //                         },\r\n            //                         {\r\n            //                             type: 'percentinput',\r\n            //                             label: 'Deep spot',\r\n            //                             name: 'deepSpot',\r\n            //                         },\r\n            //                     ]\r\n            //                 },\r\n            //                 {\r\n            //                     type: 'percentinput',\r\n            //                     label: 'Total weight lost after roasting',\r\n            //                     name: 'rostingWeightLoss',\r\n            //                 },\r\n            //                 {\r\n            //                     type: 'radiobutton',\r\n            //                     label: 'Rosted color',\r\n            //                     name: 'colour',\r\n            //                     options: ['NOT_OK', 'OK'],\r\n            //                 },\r\n            //                 {\r\n            //                     type: 'radiobutton',\r\n            //                     label: 'Flavour',\r\n            //                     name: 'flavour',\r\n            //                     options: ['NOT_OK', 'OK'],\r\n            //                 },\r\n            //             ],\r\n            //             validations: [\r\n            //                 {\r\n            //                 name: 'item',\r\n            //                 message: 'a check must have a item and sample weight',\r\n            //                 },\r\n            //                 {\r\n            //                 name: 'sampleWeight',\r\n            //                 },\r\n            //                 {\r\n            //                     name: 'measureUnit',\r\n            //                 }\r\n            //             ]\r\n            //         },\r\n            //         {\r\n            //             type: 'button',\r\n            //             label: 'Submit',\r\n            //             name: 'submit',\r\n            //         }\r\n            //     ]\r\n            // },\r\n            {\r\n                type: 'bigexpand',\r\n                name: 'processItems',\r\n                label: $localize `Storage(if stored)`,\r\n                options: 'aloneNoAdd',\r\n                collections: [\r\n                    {\r\n                        type: 'selectNormal',\r\n                        label: $localize `Weight unit`,\r\n                        name: 'measureUnit',\r\n                        // inputType: 'item',\r\n                        options: this.genral.getMeasureUnit(),\r\n                    },\r\n                    {\r\n                        type: 'bigexpand',\r\n                        label: $localize `Amounts`,\r\n                        name: 'storageForms',\r\n                        options: 'aloneNoAddNoFrameInline',\r\n                        collections: [\r\n                            {\r\n                                type: 'input',\r\n                                label: $localize `Number of units`,\r\n                                name: 'numberUnits',\r\n                                inputType: 'numeric',\r\n                                options: 3,\r\n                            },\r\n                            {\r\n                                type: 'select',\r\n                                label: $localize `Warehouse location`,\r\n                                name: 'warehouseLocation',\r\n                                collections: 'somewhere',\r\n                                options: this.genral.getWearhouses(),\r\n                            },\r\n                        ]\r\n                    },\r\n                    {\r\n                        type: 'divider',\r\n                        inputType: 'divide'\r\n                    },\r\n                ]\r\n            },\r\n            {\r\n                type: 'button',\r\n                label: $localize `Submit`,\r\n                name: 'submit',\r\n            }\r\n        ];\r\n    }\r\n    ngOnDestroy() {\r\n        if (this.navigationSubscription) {\r\n            this.navigationSubscription.unsubscribe();\r\n        }\r\n    }\r\n}\r\nQcReceiveComponent.ɵfac = function QcReceiveComponent_Factory(t) { return new (t || QcReceiveComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.QcService), i0.ɵɵdirectiveInject(i3.Genral), i0.ɵɵdirectiveInject(i4.MatDialog)); };\r\nQcReceiveComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: QcReceiveComponent, selectors: [[\"qc-receive\"]], decls: 1, vars: 1, consts: [[4, \"ngIf\"], [3, \"fields\", \"mainLabel\", \"putData\", \"submitForm\"]], template: function QcReceiveComponent_Template(rf, ctx) { if (rf & 1) {\r\n        i0.ɵɵtemplate(0, QcReceiveComponent_div_0_Template, 2, 3, \"div\", 0);\r\n    } if (rf & 2) {\r\n        i0.ɵɵproperty(\"ngIf\", ctx.isDataAvailable);\r\n    } }, directives: [i5.NgIf, i6.DynamicFormComponent], encapsulation: 2 });\r\n"]},"metadata":{},"sourceType":"module"}